{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","path":"css/highlight-dark.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","path":"css/highlight.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","path":"img/fluid.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","path":"js/img-lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/人生的智慧.md","hash":"9c51a773619d55fb81c600f18a3541124e6b51a2","modified":1665237758000},{"_id":"source/_posts/Hexo博客备份.md","hash":"ec7a3994b1213187209c8797141668b112812ea5","modified":1665242252000},{"_id":"source/_posts/Win11中WSL2搭配ubuntu使用笔记.md","hash":"281b7604ae80d3d11a34e731451407d9e103224d","modified":1665237758000},{"_id":"source/_posts/胃靠养-肠靠清.md","hash":"da97fdecf01450be2317934f5fd08ed38adcb0f7","modified":1665324276000},{"_id":"source/_posts/git学习整理.md","hash":"5cff1517cb81f6365c057259baea0f158b7ceab3","modified":1665240780000},{"_id":"source/_posts/基于GitHub和Hexo搭建博客.md","hash":"cb18052dd2477d818bbbb6aabfa9ab1e497b55bd","modified":1665242324000},{"_id":"source/_posts/如何有效阅读一本书.md","hash":"79277f17cb258d7adbd34b51b320b6a36f2bbc05","modified":1665237758000},{"_id":"source/_posts/Hexo博客备份/git文件.png","hash":"318c5a0160614de874b2361598891e4da2e4e806","modified":1665239574000},{"_id":"source/_posts/自控力.md","hash":"3b00719b5697ab906cf53106537e0719a003b268","modified":1665237758000},{"_id":"source/_posts/读书与做人.md","hash":"c92e3a72e178f312db5377da9c7a82d403bdaa99","modified":1665237758000},{"_id":"source/about/index.md","hash":"0f11cb24405ba2fe354d40cae7ac8da3afffc7b0","modified":1665237758000},{"_id":"source/_posts/git学习整理/1829507-20220316234843811-601091411.png","hash":"3c27a0309a05109b6b458fb47658ec29eb376522","modified":1665237758000},{"_id":"source/_posts/基于GitHub和Hexo搭建博客/组件版本.png","hash":"4be0aa74c9ab630ac3ed565e9523a83545b8cd7d","modified":1665237758000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1665237683780},{"_id":"node_modules/hexo-theme-fluid/package.json","hash":"1c05cec69cd3cf349b268f027a6916a9187601e0","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/LICENSE","hash":"511e49f0bd8282a0d002c527474da8e1e5add393","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/README.md","hash":"2ec6a89d66f8e41fded68aa8ec3b3363a20ea48c","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/_config.yml","hash":"3e309acfd433067266c4f6c6e9e4726eb814d6c3","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/scripts/.DS_Store","hash":"daec53fd4601c37ca272321ba2eb594d9b0a43ac","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/languages/de.yml","hash":"c52ce73a291fa50953edbd11c1dfb1cc7cab52c2","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/languages/en.yml","hash":"2839da328f197cf90cafdf2b538fcd027ab6cfba","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/languages/eo.yml","hash":"76d2920b49c8d2489c37514489545d0fc4eac834","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/languages/es.yml","hash":"7fcd16cd363f1a166a3270c23c0660eff7475744","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/languages/ja.yml","hash":"411aa49e2e8dea90a6d8cc2dc92f264609ea273b","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-CN.yml","hash":"b05d1a43516dc6886d65631d90d6995acae673db","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-HK.yml","hash":"676b3ee8a16d796b4a898a9e5be2f52c372055ed","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/languages/zh-TW.yml","hash":"aac765cccef9f9044c4a88941fd01ba1883178fc","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/.DS_Store","hash":"e2295dbe42d85b294e6f3aeefaf3623bd31759ed","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/404.ejs","hash":"0a589faccde6c2c9572e8d3d359e7c8fb166335e","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/about.ejs","hash":"bd3ede2a5f45c5256cf8f883bb8fcca645834869","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/categories.ejs","hash":"838a68e210bddfca6d4ba070e1e2f1ca53cb7d06","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/archive.ejs","hash":"c524ce76747042ec2f9ed8d5025f80e01b462b3b","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/category.ejs","hash":"264f68cbf826787e683a30e1377c56c0895c7386","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/index.ejs","hash":"33ee985aaf03c8839d8f48e38113e851705cb2db","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/links.ejs","hash":"fbed4b3d1e475b3de9d8ce05362abcc658a53408","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/layout.ejs","hash":"d4ffeb7eff398dea154340794bd277f75ddeedef","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/page.ejs","hash":"8ba210724c023d45a4564415762f3da299bd1d0e","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/tags.ejs","hash":"b7c1a6d8fc1097fc16d2300260297013cb692153","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/index.js","hash":"6c3b24207e4ea3ae4edeb715af40ef23711b92b9","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/post.ejs","hash":"5a712dded014ff5a5ffea79fb0e30b429ae715c7","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/default-injects.js","hash":"3d30c722b9e24c33577d6fab822628841fadf992","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/locals.js","hash":"2340a576635b16fd2456b3494f5afe89cd7764db","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/filters/post-filter.js","hash":"1c9156e12030fa2219a933edde460ec563836047","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/local-search.js","hash":"bda7fbe58082a2a02c0db066794b791b14462271","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/generators/pages.js","hash":"a2a15ea722863aba09dcad578558432682a3b6b3","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/engine.js","hash":"96af7e55fdbe0819bacc554ecbfe42375a088df6","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/date.js","hash":"9bc9ba08d1d871394ee1c3a1cc2f21dc343f515a","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/export-config.js","hash":"00a41768fe258bb8f3323bf4bb0b862d6e2d97c0","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/import.js","hash":"f9821f7789ea6f069977a8c642aa5ccb6d19077c","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/injects.js","hash":"9219d59c51930c7a82fcde918d6efbc5aa572ea2","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/tag.ejs","hash":"e87fc58829ea214ac16e8e4f13cd5c389133697b","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/page.js","hash":"49b2c6449d7be35739c6cfea3cab4e790580983a","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/scope.js","hash":"a93b87835bfa491fa2aa90f97f25281e3a4ffed9","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/url.js","hash":"f713ddb6c8018ec7b96d3567057f1f932609beea","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/utils.js","hash":"d7ff7cf5e721dfeafe0c2a77a5929b2c3f8fee2a","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/helpers/wordcount.js","hash":"9c01393f446c490c56b6b0d482aaa8d97cc8b717","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/compare-versions.js","hash":"37f90bd4e35ce49457dc2a348b9f66e0b242c014","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/object.js","hash":"3e03b534e2e92a6e17567b006d7e3eaad4b37598","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/resolve.js","hash":"a5d70005913ab03cea0a0dc601097628b4dbd5a8","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/url-join.js","hash":"dbdb10b23fcd3928e86a4cb46fa3455e060b4aa0","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/button.js","hash":"e1d0caed12e7cd9a35cf64272c41854b2901a58f","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/checkbox.js","hash":"aa03d0b914d87b9194ee3a0612ab5827a8dedbdd","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/group-image.js","hash":"cc176cc1d7e7cc28cedf8397ae748c691d140be2","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/label.js","hash":"6c5916d86c63795c7e910bf614b0e7ece5073702","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/.DS_Store","hash":"e11e97632e6d13d5b9dccadcc514268f3c039508","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/note.js","hash":"8020acc2c4bb3a2054e3cb349fac7cd10b79a0be","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/tags/mermaid.js","hash":"dbfe59fde77d87b1d7d0c46480a2a729010988eb","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-chains.ejs","hash":"508254a648d8597e62e4012c8beab44bfa82e904","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/.DS_Store","hash":"80308812974d7cb7e001cd8f64ff9fced30ff139","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/utils/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/archive-list.ejs","hash":"78c34e32746041f23678669bbadfbede15e4c6d2","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/css.ejs","hash":"70646e7f7a7684e12b298cd8a36fbea2814c3635","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/category-list.ejs","hash":"bd763ffc145a1f0b2c4a5dc8a101f0bc94b3f2f7","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments.ejs","hash":"bfea4674af78eb72b3a6baaa7ec9fc3c3db55ebd","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer.ejs","hash":"52b8954ae0eff5eb66a3841b37f144336b8f0866","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/head.ejs","hash":"3ca4c60a38b6b895986b15128a668266b1b12009","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header.ejs","hash":"3668304d08c48b68d532532921a12069a2736150","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/paginator.ejs","hash":"0d443f23c459787338917900f50fec1c8b3b3bdd","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/markdown-plugins.ejs","hash":"b5cd435b27f090939b6051bef41a38a3376044ac","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/scripts.ejs","hash":"89fc9f663a1091911b79ab9697c09446d16184f9","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/search.ejs","hash":"57a0f61242d9ce2bd2c51b2f84193f6dc1377ef9","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/compatible-configs.js","hash":"31208a0db986ba864f756a8ec806b7d254440f9b","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/gitalk.css","hash":"1fe60b2ab1d704f5a4f55e700dca5b8785fb390e","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/footnote.js","hash":"235dc1c2f7086dcdb9a2091cd219ef2a37aebfa4","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/hello.js","hash":"c9efdd41b8606969e5b55f49a2f6df596641b995","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/injects.js","hash":"92123b7280695b4ac6650f5e1d7fa0d772c71f5b","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/highlight.js","hash":"3f06fd3a865a703eed67aac30692d2c4b348d3a6","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/lazyload.js","hash":"c9696633f77dd8055e900497469f9e64eca4d97f","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/scripts/events/lib/merge-configs.js","hash":"ec6bf395ccad3dd41f29dc0080aeabf413e30fd9","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight-dark.styl","hash":"c74d7aed425d20f2fa096f386a9521b67b9ab269","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/highlight.styl","hash":"57ce8b8f95ab1f40612a9dce1793de5ab9b4bbfc","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/main.styl","hash":"9e9171325bb7148c11ceee283d00c137c8a1c5c5","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/img/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/js/boot.js","hash":"3f92a93cb12e01f5ce54bc941fa6626b3ee2571a","modified":1665237686000},{"_id":"node_modules/hexo-theme-fluid/source/js/color-schema.js","hash":"31d35fe044ad01dda7975d47c99d636eaa81bfc8","modified":1665237686000},{"_id":"node_modules/hexo-theme-fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/js/events.js","hash":"7d70feed0a19e3d9f5886416ae99a72e21e2f10c","modified":1665237686000},{"_id":"node_modules/hexo-theme-fluid/source/js/img-lazyload.js","hash":"67f6250f98b36a6599ea982d11cbb060c5ffb92a","modified":1665237686000},{"_id":"node_modules/hexo-theme-fluid/source/js/local-search.js","hash":"1ab61ed47ec88c876e447872342fed9be560b0f0","modified":1665237686000},{"_id":"node_modules/hexo-theme-fluid/source/js/leancloud.js","hash":"e9ad1b5659f0af867174687daa0ecf4375e40b75","modified":1665237686000},{"_id":"node_modules/hexo-theme-fluid/source/js/plugins.js","hash":"5f33939016d0a7bb72d4376af46ebb28fbf85c04","modified":1665237686000},{"_id":"node_modules/hexo-theme-fluid/source/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1665237686000},{"_id":"node_modules/hexo-theme-fluid/source/js/utils.js","hash":"61e8108fe16fbf19ce13ea89b3120c1191bb4665","modified":1665237686000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/changyan.ejs","hash":"0c410ef79785897c8de3da333b057a2936fd569b","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/giscus.ejs","hash":"66995ec9dab10ed35c2a775010c447113c6848d4","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/cusdis.ejs","hash":"1e93ca89777e4beb0f0e5cb70e03aab48e958542","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/gitalk.ejs","hash":"7f04e5c22821bb94da791973d9c6692b03bac81d","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/disqus.ejs","hash":"79ec17eec6e15076c685688e740230e92c66efa9","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/livere.ejs","hash":"bcceafab01fe695c59951d939f7cef502f3d7b48","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/remark42.ejs","hash":"45c879768b40ba56af62e18ad54bffbf73a6f3a1","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/twikoo.ejs","hash":"1568d377cd1d214be50a6560197c185ead0f7740","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/utterances.ejs","hash":"d7bcc183fc31af643e7835b13da10fe2ab8614ce","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/waline.ejs","hash":"99fe072ec17e83332325b3c59464bd39ea1f5a96","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/comments/valine.ejs","hash":"ef04d4fc3f26588ae9d8712938d648304fc05455","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/beian.ejs","hash":"77d0c9df31a22ed8a3e341637bde4165a11a7ce9","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/footer/statistics.ejs","hash":"ed2348bd9f56d19836b508c52ce9cc9122471f51","modified":1665237682000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/navigation.ejs","hash":"1560b1ca7f1f40fe1e18047ab68a3576f6613619","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/header/banner.ejs","hash":"a84d8dcb44f5f6289ef09db4d02ab14de72c2c87","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/analytics.ejs","hash":"ea10caef2e655200e275b70d40d464e34123d10b","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/anchorjs.ejs","hash":"3b31e068f394c3f63a98843711e64ac4af463fef","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/code-widget.ejs","hash":"03c7c69fbb1754fdccfa18671aac23b8637b869e","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/encrypt.ejs","hash":"76a224723775388d3fbb0433b32dfb5dcbc75a4c","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/fancybox.ejs","hash":"3900e54ade140e0e49c571a1955f0b1f3a59b281","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/highlight.ejs","hash":"502b99e19e496825df7032ca2b0b1a95ebb2b357","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/math.ejs","hash":"887292388acb8e90c1a7a415a82d128d881f8c9d","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/mermaid.ejs","hash":"fedcfb5de65c0828f6925d60a758e0c79a45396f","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/nprogress.ejs","hash":"47c1df255aa552ad71ef3e57deca46530a8f2802","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/plugins/typed.ejs","hash":"7bf29bd9faf12030e19993576299936a999c0e46","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/category-bar.ejs","hash":"eac44cfb6b0843304b2da35b32b0fa24afd9d7f9","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-bottom.ejs","hash":"f9c0f25eee37cc6e72a5fbefb2cd7284a9fd16d7","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/copyright.ejs","hash":"77cda31b5434b75ff7ac600f60a97918bc389616","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/meta-top.ejs","hash":"cef058fd6f33651118b5bdaa3c814757f5c82154","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-left.ejs","hash":"db4ecdcc762bb1b1bae5060f0baa6115174779ff","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/sidebar-right.ejs","hash":"2507cdad08f61cf8c1d9b0ca7f4f1dc8c4e5841b","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/layout/_partials/post/toc.ejs","hash":"ac544baecc05df96c6558d42b57af219e1d59e52","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_functions/base.styl","hash":"171697018fd384fce0834875ca94b91f16564cac","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_mixins/base.styl","hash":"046979dbd8cdabd21d89f9c1d8f1bb3f2fd06d6f","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_variables/base.styl","hash":"9ea66cf79f1e4356b6b402bc3dc5fb55c9862f1f","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/pages.styl","hash":"92c062cf55457b6549497244d09ec34e9c0c95c2","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_about/about.styl","hash":"8ba5fb6a8ced1de6f7893184bf12f4021fe22595","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/base.styl","hash":"cd255079553985722ee80fb1833f6507dde52194","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_archive/archive.styl","hash":"e3846fb429f6732bd15fde40f7c28b3492d786c8","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/color-schema.styl","hash":"577f3289d7f3851d4eeb867db3d92f1313a431da","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/inline.styl","hash":"96c3bb95dea4b3d3ecd20b810a674bfcef04870c","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/keyframes.styl","hash":"58a7f8f2baea2d58cf5f7edfc91314ee5d7156ca","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-bar.styl","hash":"7f95c49025a347605c726b0874fe074d888e1cc2","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-chain.styl","hash":"4263f7b930e6b57e13295d17fd3745a9e5c52494","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_category/category-list.styl","hash":"d3aeb7bf22d52d7dde59b292090ef8b46943718a","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_index/index.styl","hash":"7d50d2ae4b8b736a764fcce21ec456fa6b72518c","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_links/links.styl","hash":"d3ef491fd449d89a1b95801dee788a5d9bec4320","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/comment.styl","hash":"1fc96d09d52d9502e84e4e2a8d482ea45e8b81ea","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/highlight.styl","hash":"4bd2449fb8a3620229f0862a3b499faf1eedf2fd","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/markdown.styl","hash":"2d12f23b46d0ce07ae810bc4f5635c490a098fa4","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-page.styl","hash":"2e44047b9fecf662696b9cfce5c77ac3376cda85","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_tag/tags.styl","hash":"29e9b72cfda2f2baf9cf2597fcd7f9e66303a9bd","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_post/post-tag.styl","hash":"e8fe053ef8734e54fae12e46acd0087bcd67f8a2","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/anchorjs.styl","hash":"26d65475b1c52a61115044db8883df6739c3a473","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/board.styl","hash":"1068d71721baeed76bf0176f9b964d36b5764c9f","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/banner.styl","hash":"80301db38e448e40e88bb34d0128628b0809b243","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/code-widget.styl","hash":"417a7388b39c0203178b0032e151febd66a0e9f3","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/copyright.styl","hash":"3ac1eb36e124adef607775aa505386d5680960e2","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footer.styl","hash":"e6f5921ff9009c1853e7db30c482bc1682433ed9","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"41935973a66c14ab2bea0539d4b1f15c62534fa4","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/header.styl","hash":"30f50446609d49c896e92a89225591b606adc863","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/modal.styl","hash":"0ca6171ce262339e0e36cfea0978b554d87ae7fc","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/noscript.styl","hash":"8fad325e411bc83c8ebdc4115015477eed5f60da","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/ngrogress.styl","hash":"48799d3148ef6493be0e05897c635124e9b05d03","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/pagination.styl","hash":"f4ae7cbf2f10f459de7864f8e642553b587df889","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"04447d3b673be84a1af1dc57933a3c41dd7c0cfe","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4dbbbb1a2508a72bc04680552d7ebbea0eed0fe","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/search.styl","hash":"1f4e678d7219815ab62de1b92ec75e021247f90b","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/css/_pages/_base/_widget/toc.styl","hash":"5defef321e3e933fe84f3f2ca481c88f55381fb0","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/img/favicon.png","hash":"1f0b11c14f117e4636f929e472a1e87d06841acb","modified":1665237684000},{"_id":"node_modules/hexo-theme-fluid/source/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1665237684000},{"_id":"public/local-search.xml","hash":"148a67f3ece03d47c6c483f6773f0506d27722d4","modified":1665324302889},{"_id":"public/about/index.html","hash":"4d8fd5879d2b43a5756475ea8b10afd6a76b6e2a","modified":1665324302889},{"_id":"public/archives/index.html","hash":"8edb721524a0c7380e0aa00d1fb0f81e4b53b017","modified":1665324302889},{"_id":"public/archives/2022/index.html","hash":"ac98a98600a5212dd61204d94ccce32fe7039c8d","modified":1665324302889},{"_id":"public/archives/2022/09/index.html","hash":"a6414e69f4cb879670c69a84369f9f4dbf09673d","modified":1665324302889},{"_id":"public/archives/2022/10/index.html","hash":"ae8b1ea52cf6aa738e7449d2d6e60427f0f5b734","modified":1665324302889},{"_id":"public/categories/其他/index.html","hash":"12df7edc30bfc1ad35e3b7710e5dbdd7e0b768dd","modified":1665324302889},{"_id":"public/categories/linux/index.html","hash":"f8046b72be66a352625736873df9e7ab8748b58b","modified":1665324302889},{"_id":"public/categories/svn/index.html","hash":"1477f776c07b1ec6068726eff1953a5f251dfa04","modified":1665324302889},{"_id":"public/categories/读书/index.html","hash":"ff6e65ab96e9bc6e2dd9571758420b89ddf995cb","modified":1665324302889},{"_id":"public/tags/博客搭建/index.html","hash":"89fdc9977118ed665dfab031ce2d62fbba66bf8e","modified":1665324302889},{"_id":"public/tags/ubuntu/index.html","hash":"d2cdab2299468cb539d404f2dc55b42ee32bb11f","modified":1665324302889},{"_id":"public/tags/git/index.html","hash":"30c0c6dbabb986362385b562282060223635f38b","modified":1665324302889},{"_id":"public/tags/读书与做人/index.html","hash":"0b281974e862367238e56817f18674c0b023abf4","modified":1665324302889},{"_id":"public/tags/养生/index.html","hash":"f492d83830b6f9c2a0bcdf8183f813f80d769fd8","modified":1665324302889},{"_id":"public/tags/心理/index.html","hash":"54a8562bd199482c45a99a79ca862dfa8d4dd5c1","modified":1665324302889},{"_id":"public/404.html","hash":"ca4afca4e4bb785b1cd197c51b73c0d91308d789","modified":1665324302889},{"_id":"public/tags/index.html","hash":"52eff01dc10cd553a7f7a926589301f6bc899662","modified":1665324302889},{"_id":"public/categories/index.html","hash":"e7615c6ec69cdc7b1b1a68aaad173d84f86702c0","modified":1665324302889},{"_id":"public/2022/10/09/胃靠养-肠靠清/index.html","hash":"a29a721093c3387f50fdb2cfc0cfa623933c1b75","modified":1665324302889},{"_id":"public/2022/10/08/Hexo博客备份/index.html","hash":"3928cbf099a9b7f240e5f20304ee349f13c27c0e","modified":1665324302889},{"_id":"public/2022/09/25/git学习整理/index.html","hash":"0d1e6e415eff6eb2c37fba8cba388cbd5fb2b0f3","modified":1665324302889},{"_id":"public/2022/09/17/Win11中WSL2搭配ubuntu使用笔记/index.html","hash":"776e216663f3805386e8925d2e798efbb650721b","modified":1665324302889},{"_id":"public/2022/09/11/人生的智慧/index.html","hash":"ddf280800681d873e7e8375802238ea3fc7cc16b","modified":1665324302889},{"_id":"public/2022/09/11/读书与做人/index.html","hash":"92f0eb1efba950bcb80f71c39f7598a71aac8539","modified":1665324302889},{"_id":"public/2022/09/11/自控力/index.html","hash":"d57472a4f06b0fa136c4f97e078e97dbef1b01bf","modified":1665324302889},{"_id":"public/2022/09/11/如何有效阅读一本书/index.html","hash":"7b05c889c40144d1881435d4737147c201ec4a99","modified":1665324302889},{"_id":"public/2022/09/06/基于GitHub和Hexo搭建博客/index.html","hash":"b4c740aa96cefca5afe6958076b0ec428a99cdb9","modified":1665324302889},{"_id":"public/index.html","hash":"9266361dd2f7c2ce95623e757d5b8a2f32391296","modified":1665324302889},{"_id":"public/links/index.html","hash":"46879f274a7cf3b520b8da7dad41d894f5752f2d","modified":1665324302889},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1665324302889},{"_id":"public/img/fluid.png","hash":"64b215db2cb3af98fe639e94537cb5209f959c78","modified":1665324302889},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1665324302889},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1665324302889},{"_id":"public/xml/local-search.xml","hash":"85fcc23b4db654a7f91fc55b6fb0442bb3ed3a9a","modified":1665324302889},{"_id":"public/2022/10/08/Hexo博客备份/git文件.png","hash":"318c5a0160614de874b2361598891e4da2e4e806","modified":1665324302889},{"_id":"public/2022/09/25/git学习整理/1829507-20220316234843811-601091411.png","hash":"3c27a0309a05109b6b458fb47658ec29eb376522","modified":1665324302889},{"_id":"public/2022/09/06/基于GitHub和Hexo搭建博客/组件版本.png","hash":"4be0aa74c9ab630ac3ed565e9523a83545b8cd7d","modified":1665324302889},{"_id":"public/css/highlight-dark.css","hash":"2b0daa6e5343da9dbb26d617d224b8397e48556b","modified":1665324302889},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1665324302889},{"_id":"public/css/highlight.css","hash":"0f9a477d33d3b15ebe7e163e756fb7c54c7ded6b","modified":1665324302889},{"_id":"public/js/boot.js","hash":"2848f8eb5081a7f0550fbd76dc06d3ff877f1913","modified":1665324302889},{"_id":"public/js/color-schema.js","hash":"ba63f7c3324bc1fdd050a90add9d8faaffc27e07","modified":1665324302889},{"_id":"public/js/events.js","hash":"f05a569a9fd6da2fda69a2cf8e276ba81580faf3","modified":1665324302889},{"_id":"public/js/img-lazyload.js","hash":"cbdeca434ec4da51f488c821d51b4d23c73294af","modified":1665324302889},{"_id":"public/js/local-search.js","hash":"cebcda5991b6a9ab9307c69542389ce9013f04f7","modified":1665324302889},{"_id":"public/js/leancloud.js","hash":"eff77c7a5c399fcaefda48884980571e15243fc9","modified":1665324302889},{"_id":"public/js/utils.js","hash":"45cc86f099db0a2c36ad49711ce66c2d598a2ab1","modified":1665324302889},{"_id":"public/js/plugins.js","hash":"2333494add51e5e1374602a4e81f0be36a05d4c2","modified":1665324302889},{"_id":"public/css/main.css","hash":"f7ce6ed5308c621930136e91fe5e47d1ad91130b","modified":1665324302889},{"_id":"public/img/favicon.png","hash":"1f0b11c14f117e4636f929e472a1e87d06841acb","modified":1665324302889},{"_id":"public/img/default.png","hash":"167a12978d80371cf578c8a2e45c24a2eb25b6fb","modified":1665324302889}],"Category":[{"name":"其他","_id":"cl91f3cht0003egoibpl2fif7"},{"name":"linux","_id":"cl91f3ci00008egoi7g0p0t4y"},{"name":"svn","_id":"cl91f3ci4000fegoi6hig247c"},{"name":"读书","_id":"cl91f3ci9000megoicrmr2i77"}],"Data":[],"Page":[{"title":"about atree","layout":"about atree","_content":"","source":"about/index.md","raw":"---\ntitle: about atree\nlayout: about atree\n---\n","date":"2009-04-22T19:24:48.000Z","updated":"2022-10-08T14:02:38.000Z","path":"about/index.html","comments":1,"_id":"cl91f3chg0000egoici2ra6cm","content":"","site":{"data":{}},"wordcount":0,"excerpt":"","more":""}],"Post":[{"title":"Hexo博客备份","date":"2022-10-08T14:55:38.000Z","_content":"\n# 1 概述\n\n《基于GitHub和Hexo搭建博客》中总结了如何利用github和hexo搭建个人博客，但是github上上传的只是博客网站文件，像markdown笔记之类的源文件并没有备份，如果本地电脑坏了很难恢复以往的markdown笔记，所以需要连同markdown笔记在内的源文件都备份到github上。\n\n# 2 备份步骤\n\n## 2.1 创建新分支\n\n在github上的博客所在仓库上创建一个用来备份的分支hexo，并且将其设置为默认分支。\n\n## 2.2 获取git信息文件\n\n去桌面或者哪里随便一个地方，把刚刚的hexo分支给clone下来。然后剪切出里面的.git文件夹，复制到现在的博客文件夹中。\n\n![](./Hexo博客备份/git文件.png)\n\n## 2.3 添加 .[gitignore](https://so.csdn.net/so/search?q=gitignore&spm=1001.2101.3001.7020)\n\n用来在上传时候忽略一些文件，即不上传`.gitignore`中忽略的文件。如果有最好，没有的话自己手动添加。\n\n```\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n```\n\n**注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。**\n\n## 2.4 备份\n\n在hexo博客的根目录下执行\n\n```\n$ git add .\n$ git commit -m \"Backup\"\n$ git push origin hexo\n```\n\n这样就备份完博客了且在Github上能看到两个分支(main和hexo)。\n\n## 2.5 备份习惯\n\n```\nhexo clean\ngit add .\ngit commit -m \"Backup\"\ngit push\nhexo g\nhexo d\n```\n\n# 3 恢复步骤\n\n## 3.1 环境准备\n\n安装git 、nodejs，确保github公钥接入，参考《基于GitHub和Hexo搭建博客》\n\n## 3.2 克隆项目到本地\n\n输入下列命令克隆博客必须文件(hexo分支)：\n\n```\n$ git clone https://xxxxx(详见仓库链接)\n```\n\n## 3.3 博客恢复\n\n在clone下来的那个文件夹里面执行\n\n```\n$ npm install hexo-cli\n$ npm install\n$ npm install hexo-deployer-git –save\n$ rm -rf .deploy_git\n```\n\n然后再去安装原来安装的一些插件。**在此不需要执行hexo init这条指令，因为不是从零搭建起新博客。\n\n后续正常写博客，执行以下命令即可\n\n```\nhexo n xx\nhexo clean\nhexo g\nhexo d\n```\n\n# 4 参考\n\n[【Hexo异常】fatal: in unpopulated submodule '.deploy_git'_nomasp的博客-CSDN博客](https://blog.csdn.net/NoMasp/article/details/79504699)\n\n[ Hexo博客的备份_fFee-ops的博客-CSDN博客_hexo备份](https://blog.csdn.net/qq_21040559/article/details/109702142)\n","source":"_posts/Hexo博客备份.md","raw":"---\ntitle: Hexo博客备份\ndate: 2022-10-08 22:55:38\ncategories: \n- 其他\ntags: \n- 博客搭建\n---\n\n# 1 概述\n\n《基于GitHub和Hexo搭建博客》中总结了如何利用github和hexo搭建个人博客，但是github上上传的只是博客网站文件，像markdown笔记之类的源文件并没有备份，如果本地电脑坏了很难恢复以往的markdown笔记，所以需要连同markdown笔记在内的源文件都备份到github上。\n\n# 2 备份步骤\n\n## 2.1 创建新分支\n\n在github上的博客所在仓库上创建一个用来备份的分支hexo，并且将其设置为默认分支。\n\n## 2.2 获取git信息文件\n\n去桌面或者哪里随便一个地方，把刚刚的hexo分支给clone下来。然后剪切出里面的.git文件夹，复制到现在的博客文件夹中。\n\n![](./Hexo博客备份/git文件.png)\n\n## 2.3 添加 .[gitignore](https://so.csdn.net/so/search?q=gitignore&spm=1001.2101.3001.7020)\n\n用来在上传时候忽略一些文件，即不上传`.gitignore`中忽略的文件。如果有最好，没有的话自己手动添加。\n\n```\n.DS_Store\nThumbs.db\ndb.json\n*.log\nnode_modules/\npublic/\n.deploy*/\n```\n\n**注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。**\n\n## 2.4 备份\n\n在hexo博客的根目录下执行\n\n```\n$ git add .\n$ git commit -m \"Backup\"\n$ git push origin hexo\n```\n\n这样就备份完博客了且在Github上能看到两个分支(main和hexo)。\n\n## 2.5 备份习惯\n\n```\nhexo clean\ngit add .\ngit commit -m \"Backup\"\ngit push\nhexo g\nhexo d\n```\n\n# 3 恢复步骤\n\n## 3.1 环境准备\n\n安装git 、nodejs，确保github公钥接入，参考《基于GitHub和Hexo搭建博客》\n\n## 3.2 克隆项目到本地\n\n输入下列命令克隆博客必须文件(hexo分支)：\n\n```\n$ git clone https://xxxxx(详见仓库链接)\n```\n\n## 3.3 博客恢复\n\n在clone下来的那个文件夹里面执行\n\n```\n$ npm install hexo-cli\n$ npm install\n$ npm install hexo-deployer-git –save\n$ rm -rf .deploy_git\n```\n\n然后再去安装原来安装的一些插件。**在此不需要执行hexo init这条指令，因为不是从零搭建起新博客。\n\n后续正常写博客，执行以下命令即可\n\n```\nhexo n xx\nhexo clean\nhexo g\nhexo d\n```\n\n# 4 参考\n\n[【Hexo异常】fatal: in unpopulated submodule '.deploy_git'_nomasp的博客-CSDN博客](https://blog.csdn.net/NoMasp/article/details/79504699)\n\n[ Hexo博客的备份_fFee-ops的博客-CSDN博客_hexo备份](https://blog.csdn.net/qq_21040559/article/details/109702142)\n","slug":"Hexo博客备份","published":1,"updated":"2022-10-08T15:17:32.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl91f3chn0001egoieru6cpvc","content":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1 概述\"></a>1 概述</h1><p>《基于GitHub和Hexo搭建博客》中总结了如何利用github和hexo搭建个人博客，但是github上上传的只是博客网站文件，像markdown笔记之类的源文件并没有备份，如果本地电脑坏了很难恢复以往的markdown笔记，所以需要连同markdown笔记在内的源文件都备份到github上。</p>\n<h1 id=\"2-备份步骤\"><a href=\"#2-备份步骤\" class=\"headerlink\" title=\"2 备份步骤\"></a>2 备份步骤</h1><h2 id=\"2-1-创建新分支\"><a href=\"#2-1-创建新分支\" class=\"headerlink\" title=\"2.1 创建新分支\"></a>2.1 创建新分支</h2><p>在github上的博客所在仓库上创建一个用来备份的分支hexo，并且将其设置为默认分支。</p>\n<h2 id=\"2-2-获取git信息文件\"><a href=\"#2-2-获取git信息文件\" class=\"headerlink\" title=\"2.2 获取git信息文件\"></a>2.2 获取git信息文件</h2><p>去桌面或者哪里随便一个地方，把刚刚的hexo分支给clone下来。然后剪切出里面的.git文件夹，复制到现在的博客文件夹中。</p>\n<p><img src=\"/2022/10/08/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD/git%E6%96%87%E4%BB%B6.png\"></p>\n<h2 id=\"2-3-添加-gitignore\"><a href=\"#2-3-添加-gitignore\" class=\"headerlink\" title=\"2.3 添加 .gitignore\"></a>2.3 添加 .<a href=\"https://so.csdn.net/so/search?q=gitignore&spm=1001.2101.3001.7020\">gitignore</a></h2><p>用来在上传时候忽略一些文件，即不上传<code>.gitignore</code>中忽略的文件。如果有最好，没有的话自己手动添加。</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\"><span class=\"hljs-meta\">.DS_Store</span><br>Thumbs<span class=\"hljs-number\">.</span><span class=\"hljs-built_in\">db</span><br><span class=\"hljs-built_in\">db</span><span class=\"hljs-number\">.</span>json<br>*.log<br>node_modules/<br><span class=\"hljs-meta\">public</span>/<br><span class=\"hljs-meta\">.deploy</span>*/<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。</strong></p>\n<h2 id=\"2-4-备份\"><a href=\"#2-4-备份\" class=\"headerlink\" title=\"2.4 备份\"></a>2.4 备份</h2><p>在hexo博客的根目录下执行</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>git add .<br><span class=\"hljs-variable\">$ </span>git commit -m <span class=\"hljs-string\">&quot;Backup&quot;</span><br><span class=\"hljs-variable\">$ </span>git push origin hexo<br></code></pre></td></tr></table></figure>\n\n<p>这样就备份完博客了且在Github上能看到两个分支(main和hexo)。</p>\n<h2 id=\"2-5-备份习惯\"><a href=\"#2-5-备份习惯\" class=\"headerlink\" title=\"2.5 备份习惯\"></a>2.5 备份习惯</h2><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">hexo</span> clean<br><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">add</span> .<br><span class=\"hljs-symbol\">git</span> commit -m <span class=\"hljs-string\">&quot;Backup&quot;</span><br><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">push</span><br><span class=\"hljs-symbol\">hexo</span> g<br><span class=\"hljs-symbol\">hexo</span> d<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"3-恢复步骤\"><a href=\"#3-恢复步骤\" class=\"headerlink\" title=\"3 恢复步骤\"></a>3 恢复步骤</h1><h2 id=\"3-1-环境准备\"><a href=\"#3-1-环境准备\" class=\"headerlink\" title=\"3.1 环境准备\"></a>3.1 环境准备</h2><p>安装git 、nodejs，确保github公钥接入，参考《基于GitHub和Hexo搭建博客》</p>\n<h2 id=\"3-2-克隆项目到本地\"><a href=\"#3-2-克隆项目到本地\" class=\"headerlink\" title=\"3.2 克隆项目到本地\"></a>3.2 克隆项目到本地</h2><p>输入下列命令克隆博客必须文件(hexo分支)：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">https</span>://xxxxx(详见仓库链接)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-3-博客恢复\"><a href=\"#3-3-博客恢复\" class=\"headerlink\" title=\"3.3 博客恢复\"></a>3.3 博客恢复</h2><p>在clone下来的那个文件夹里面执行</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-variable\">$</span> npm install hexo<span class=\"hljs-literal\">-cli</span><br><span class=\"hljs-variable\">$</span> npm install<br><span class=\"hljs-variable\">$</span> npm install hexo<span class=\"hljs-literal\">-deployer-git</span> –save<br><span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">rm</span> <span class=\"hljs-literal\">-rf</span> .deploy_git<br></code></pre></td></tr></table></figure>\n\n<p>然后再去安装原来安装的一些插件。**在此不需要执行hexo init这条指令，因为不是从零搭建起新博客。</p>\n<p>后续正常写博客，执行以下命令即可</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\">hexo <span class=\"hljs-built_in\">n</span> xx<br>hexo <span class=\"hljs-built_in\">clean</span><br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4 参考\"></a>4 参考</h1><p><a href=\"https://blog.csdn.net/NoMasp/article/details/79504699\">【Hexo异常】fatal: in unpopulated submodule ‘.deploy_git’_nomasp的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/qq_21040559/article/details/109702142\"> Hexo博客的备份_fFee-ops的博客-CSDN博客_hexo备份</a></p>\n","site":{"data":{}},"wordcount":1155,"excerpt":"","more":"<h1 id=\"1-概述\"><a href=\"#1-概述\" class=\"headerlink\" title=\"1 概述\"></a>1 概述</h1><p>《基于GitHub和Hexo搭建博客》中总结了如何利用github和hexo搭建个人博客，但是github上上传的只是博客网站文件，像markdown笔记之类的源文件并没有备份，如果本地电脑坏了很难恢复以往的markdown笔记，所以需要连同markdown笔记在内的源文件都备份到github上。</p>\n<h1 id=\"2-备份步骤\"><a href=\"#2-备份步骤\" class=\"headerlink\" title=\"2 备份步骤\"></a>2 备份步骤</h1><h2 id=\"2-1-创建新分支\"><a href=\"#2-1-创建新分支\" class=\"headerlink\" title=\"2.1 创建新分支\"></a>2.1 创建新分支</h2><p>在github上的博客所在仓库上创建一个用来备份的分支hexo，并且将其设置为默认分支。</p>\n<h2 id=\"2-2-获取git信息文件\"><a href=\"#2-2-获取git信息文件\" class=\"headerlink\" title=\"2.2 获取git信息文件\"></a>2.2 获取git信息文件</h2><p>去桌面或者哪里随便一个地方，把刚刚的hexo分支给clone下来。然后剪切出里面的.git文件夹，复制到现在的博客文件夹中。</p>\n<p><img src=\"/2022/10/08/Hexo%E5%8D%9A%E5%AE%A2%E5%A4%87%E4%BB%BD/git%E6%96%87%E4%BB%B6.png\"></p>\n<h2 id=\"2-3-添加-gitignore\"><a href=\"#2-3-添加-gitignore\" class=\"headerlink\" title=\"2.3 添加 .gitignore\"></a>2.3 添加 .<a href=\"https://so.csdn.net/so/search?q=gitignore&spm=1001.2101.3001.7020\">gitignore</a></h2><p>用来在上传时候忽略一些文件，即不上传<code>.gitignore</code>中忽略的文件。如果有最好，没有的话自己手动添加。</p>\n<figure class=\"highlight x86asm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs x86asm\"><span class=\"hljs-meta\">.DS_Store</span><br>Thumbs<span class=\"hljs-number\">.</span><span class=\"hljs-built_in\">db</span><br><span class=\"hljs-built_in\">db</span><span class=\"hljs-number\">.</span>json<br>*.log<br>node_modules/<br><span class=\"hljs-meta\">public</span>/<br><span class=\"hljs-meta\">.deploy</span>*/<br></code></pre></td></tr></table></figure>\n\n<p><strong>注意，如果你之前克隆过theme中的主题文件，那么应该把主题文件中的.git文件夹删掉，因为git不能嵌套上传，最好是显示隐藏文件，检查一下有没有，否则上传的时候会出错，导致你的主题文件无法上传，这样你的配置在别的电脑上就用不了了。</strong></p>\n<h2 id=\"2-4-备份\"><a href=\"#2-4-备份\" class=\"headerlink\" title=\"2.4 备份\"></a>2.4 备份</h2><p>在hexo博客的根目录下执行</p>\n<figure class=\"highlight elixir\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs elixir\"><span class=\"hljs-variable\">$ </span>git add .<br><span class=\"hljs-variable\">$ </span>git commit -m <span class=\"hljs-string\">&quot;Backup&quot;</span><br><span class=\"hljs-variable\">$ </span>git push origin hexo<br></code></pre></td></tr></table></figure>\n\n<p>这样就备份完博客了且在Github上能看到两个分支(main和hexo)。</p>\n<h2 id=\"2-5-备份习惯\"><a href=\"#2-5-备份习惯\" class=\"headerlink\" title=\"2.5 备份习惯\"></a>2.5 备份习惯</h2><figure class=\"highlight armasm\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs armasm\"><span class=\"hljs-symbol\">hexo</span> clean<br><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">add</span> .<br><span class=\"hljs-symbol\">git</span> commit -m <span class=\"hljs-string\">&quot;Backup&quot;</span><br><span class=\"hljs-symbol\">git</span> <span class=\"hljs-keyword\">push</span><br><span class=\"hljs-symbol\">hexo</span> g<br><span class=\"hljs-symbol\">hexo</span> d<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"3-恢复步骤\"><a href=\"#3-恢复步骤\" class=\"headerlink\" title=\"3 恢复步骤\"></a>3 恢复步骤</h1><h2 id=\"3-1-环境准备\"><a href=\"#3-1-环境准备\" class=\"headerlink\" title=\"3.1 环境准备\"></a>3.1 环境准备</h2><p>安装git 、nodejs，确保github公钥接入，参考《基于GitHub和Hexo搭建博客》</p>\n<h2 id=\"3-2-克隆项目到本地\"><a href=\"#3-2-克隆项目到本地\" class=\"headerlink\" title=\"3.2 克隆项目到本地\"></a>3.2 克隆项目到本地</h2><p>输入下列命令克隆博客必须文件(hexo分支)：</p>\n<figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs crmsh\">$ git <span class=\"hljs-keyword\">clone</span> <span class=\"hljs-title\">https</span>://xxxxx(详见仓库链接)<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"3-3-博客恢复\"><a href=\"#3-3-博客恢复\" class=\"headerlink\" title=\"3.3 博客恢复\"></a>3.3 博客恢复</h2><p>在clone下来的那个文件夹里面执行</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\"><span class=\"hljs-variable\">$</span> npm install hexo<span class=\"hljs-literal\">-cli</span><br><span class=\"hljs-variable\">$</span> npm install<br><span class=\"hljs-variable\">$</span> npm install hexo<span class=\"hljs-literal\">-deployer-git</span> –save<br><span class=\"hljs-variable\">$</span> <span class=\"hljs-built_in\">rm</span> <span class=\"hljs-literal\">-rf</span> .deploy_git<br></code></pre></td></tr></table></figure>\n\n<p>然后再去安装原来安装的一些插件。**在此不需要执行hexo init这条指令，因为不是从零搭建起新博客。</p>\n<p>后续正常写博客，执行以下命令即可</p>\n<figure class=\"highlight excel\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs excel\">hexo <span class=\"hljs-built_in\">n</span> xx<br>hexo <span class=\"hljs-built_in\">clean</span><br>hexo g<br>hexo d<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"4-参考\"><a href=\"#4-参考\" class=\"headerlink\" title=\"4 参考\"></a>4 参考</h1><p><a href=\"https://blog.csdn.net/NoMasp/article/details/79504699\">【Hexo异常】fatal: in unpopulated submodule ‘.deploy_git’_nomasp的博客-CSDN博客</a></p>\n<p><a href=\"https://blog.csdn.net/qq_21040559/article/details/109702142\"> Hexo博客的备份_fFee-ops的博客-CSDN博客_hexo备份</a></p>\n"},{"title":"Win11中WSL2搭配ubuntu使用笔记","date":"2022-09-17T15:05:49.000Z","_content":"\n# 背景\n\n在surface go 3上基于WSL2装了一个ubuntu玩玩，记录下相关信息\n\n# 安装步骤\n\n[Install Ubuntu on WSL2 on Windows 11 with GUI support | Ubuntu](https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-11-with-gui-support#1-overview)\n\n## WSL命令\n\n- cmd键入以下命令以查看所有正在运行的WSL，然后按Enter：\n\n`wsl --list --verbose`\n\n- cmd关闭所有的后台的linux虚拟机\n\n`wsl --shutdown`\n\n* 重新启动linux虚拟机\n\n如果需要重新启动Linux发行版，只需从开始菜单或使用`wsl --distribution DISTRO-NAME`命令在命令提示符下再次将其打开。请记住将DISTRO-NAME替换为发行版的实际名称。\n\n# 命令\n\n## 基本命令\n\n* 系统升级\n\n`sudo apt update`\n\n`sudo apt full-upgrade`\n\n* 文件传输（图形化界面）\n\n`explorer.exe .`\n\n* 查看Linux内核版本命令\n\n`cat /proc/version`\n\n* 查看Linux系统版本\n\n`cat /etc/issue`\n\n# 参考资料\n\n[Install Ubuntu on WSL2 on Windows 11 with GUI support | Ubuntu](https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-11-with-gui-support#1-overview)\n\n[只需一条命令，快速在Windows 10上关闭Linux - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/351880793)\n","source":"_posts/Win11中WSL2搭配ubuntu使用笔记.md","raw":"---\ntitle: Win11中WSL2搭配ubuntu使用笔记\ndate: 2022-09-17 23:05:49\ncategories: \n- linux\ntags: \n- ubuntu\n---\n\n# 背景\n\n在surface go 3上基于WSL2装了一个ubuntu玩玩，记录下相关信息\n\n# 安装步骤\n\n[Install Ubuntu on WSL2 on Windows 11 with GUI support | Ubuntu](https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-11-with-gui-support#1-overview)\n\n## WSL命令\n\n- cmd键入以下命令以查看所有正在运行的WSL，然后按Enter：\n\n`wsl --list --verbose`\n\n- cmd关闭所有的后台的linux虚拟机\n\n`wsl --shutdown`\n\n* 重新启动linux虚拟机\n\n如果需要重新启动Linux发行版，只需从开始菜单或使用`wsl --distribution DISTRO-NAME`命令在命令提示符下再次将其打开。请记住将DISTRO-NAME替换为发行版的实际名称。\n\n# 命令\n\n## 基本命令\n\n* 系统升级\n\n`sudo apt update`\n\n`sudo apt full-upgrade`\n\n* 文件传输（图形化界面）\n\n`explorer.exe .`\n\n* 查看Linux内核版本命令\n\n`cat /proc/version`\n\n* 查看Linux系统版本\n\n`cat /etc/issue`\n\n# 参考资料\n\n[Install Ubuntu on WSL2 on Windows 11 with GUI support | Ubuntu](https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-11-with-gui-support#1-overview)\n\n[只需一条命令，快速在Windows 10上关闭Linux - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/351880793)\n","slug":"Win11中WSL2搭配ubuntu使用笔记","published":1,"updated":"2022-10-08T14:02:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl91f3chr0002egoi5awr0x2r","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>在surface go 3上基于WSL2装了一个ubuntu玩玩，记录下相关信息</p>\n<h1 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h1><p><a href=\"https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-11-with-gui-support#1-overview\">Install Ubuntu on WSL2 on Windows 11 with GUI support | Ubuntu</a></p>\n<h2 id=\"WSL命令\"><a href=\"#WSL命令\" class=\"headerlink\" title=\"WSL命令\"></a>WSL命令</h2><ul>\n<li>cmd键入以下命令以查看所有正在运行的WSL，然后按Enter：</li>\n</ul>\n<p><code>wsl --list --verbose</code></p>\n<ul>\n<li>cmd关闭所有的后台的linux虚拟机</li>\n</ul>\n<p><code>wsl --shutdown</code></p>\n<ul>\n<li>重新启动linux虚拟机</li>\n</ul>\n<p>如果需要重新启动Linux发行版，只需从开始菜单或使用<code>wsl --distribution DISTRO-NAME</code>命令在命令提示符下再次将其打开。请记住将DISTRO-NAME替换为发行版的实际名称。</p>\n<h1 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h1><h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><ul>\n<li>系统升级</li>\n</ul>\n<p><code>sudo apt update</code></p>\n<p><code>sudo apt full-upgrade</code></p>\n<ul>\n<li>文件传输（图形化界面）</li>\n</ul>\n<p><code>explorer.exe .</code></p>\n<ul>\n<li>查看Linux内核版本命令</li>\n</ul>\n<p><code>cat /proc/version</code></p>\n<ul>\n<li>查看Linux系统版本</li>\n</ul>\n<p><code>cat /etc/issue</code></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-11-with-gui-support#1-overview\">Install Ubuntu on WSL2 on Windows 11 with GUI support | Ubuntu</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/351880793\">只需一条命令，快速在Windows 10上关闭Linux - 知乎 (zhihu.com)</a></p>\n","site":{"data":{}},"wordcount":507,"excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>在surface go 3上基于WSL2装了一个ubuntu玩玩，记录下相关信息</p>\n<h1 id=\"安装步骤\"><a href=\"#安装步骤\" class=\"headerlink\" title=\"安装步骤\"></a>安装步骤</h1><p><a href=\"https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-11-with-gui-support#1-overview\">Install Ubuntu on WSL2 on Windows 11 with GUI support | Ubuntu</a></p>\n<h2 id=\"WSL命令\"><a href=\"#WSL命令\" class=\"headerlink\" title=\"WSL命令\"></a>WSL命令</h2><ul>\n<li>cmd键入以下命令以查看所有正在运行的WSL，然后按Enter：</li>\n</ul>\n<p><code>wsl --list --verbose</code></p>\n<ul>\n<li>cmd关闭所有的后台的linux虚拟机</li>\n</ul>\n<p><code>wsl --shutdown</code></p>\n<ul>\n<li>重新启动linux虚拟机</li>\n</ul>\n<p>如果需要重新启动Linux发行版，只需从开始菜单或使用<code>wsl --distribution DISTRO-NAME</code>命令在命令提示符下再次将其打开。请记住将DISTRO-NAME替换为发行版的实际名称。</p>\n<h1 id=\"命令\"><a href=\"#命令\" class=\"headerlink\" title=\"命令\"></a>命令</h1><h2 id=\"基本命令\"><a href=\"#基本命令\" class=\"headerlink\" title=\"基本命令\"></a>基本命令</h2><ul>\n<li>系统升级</li>\n</ul>\n<p><code>sudo apt update</code></p>\n<p><code>sudo apt full-upgrade</code></p>\n<ul>\n<li>文件传输（图形化界面）</li>\n</ul>\n<p><code>explorer.exe .</code></p>\n<ul>\n<li>查看Linux内核版本命令</li>\n</ul>\n<p><code>cat /proc/version</code></p>\n<ul>\n<li>查看Linux系统版本</li>\n</ul>\n<p><code>cat /etc/issue</code></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://ubuntu.com/tutorials/install-ubuntu-on-wsl2-on-windows-11-with-gui-support#1-overview\">Install Ubuntu on WSL2 on Windows 11 with GUI support | Ubuntu</a></p>\n<p><a href=\"https://zhuanlan.zhihu.com/p/351880793\">只需一条命令，快速在Windows 10上关闭Linux - 知乎 (zhihu.com)</a></p>\n"},{"title":"git学习整理","date":"2022-09-25T12:06:06.000Z","_content":"\n# 1 创建版本库\n\n版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。\n\n初始化一个Git仓库，使用`git init`命令。\n\n添加文件到Git仓库，分两步：\n\n1. 使用命令`git add 文件名`，注意，可反复多次使用，添加多个文件，此时文件放到了缓存区；\n2. 使用命令`git commit -m \"提交信息\"`，完成，此时文件从缓存区被放到了head指定的当前分支中。\n\n# 2 查看工作区状态与提交修改\n\n要随时掌握工作区的状态，使用`git status`命令。\n\n如果git status告诉你有文件被修改过，用`git diff`可以查看修改内容。\n\n提交修改与添加文件的步骤一样\n\n```\n git add 文件名\n git commit -m \"add a line\"\n```\n\n将暂存区的版本提交到版本库,从而形成工作区->暂存区->版本库的基本链路,本地工作区的版本控制流程大致如此.\n\n# 3 版本切换\n\nHEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令`git reset --hard commit_id`（commit_id可以输入前几位就行）。\n\n穿梭前，用`git log`可以查看提交历史，以便确定要回退到哪个版本。\n\n要重返未来，用`git reflog`查看命令历史，以便确定要回到未来的哪个版本。\n\n# 4 多次修改\n\n第一次修改 -> git add -> 第二次修改 -> git add -> git commit\n\n# 5 修改撤销\n\n- 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令`git checkout -- file`。\n- 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令`git reset HEAD` ，就回到了场景1，第二步按场景1操作。\n- 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考**版本切换**一节，不过前提是没有推送到远程库。\n\n# 6 删除文件\n\n如果在本地删除了文件，可以通过以下操作在git库里删除  \n\n`git rm test.txt`  \n\n`git commit -m \"remove test.txt\"`  \n\n可以通过以下操作恢复，相当于是让工作目录test.txt恢复到暂存区中test.txt的状态\n\n`git checkout -- test.txt`\n\n# 7 添加远程库\n\n把本地库的内容推送到远程，用git push命令，实际上是把指定分支推送到远程。  \n\n由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n1. 要关联一个远程库，使用命令\n   \n   ```\n   git remote add origin git@server-name:path/repo-name.git\n   ```\n   \n   例如：\n   \n   ```\n   git remote add origin git@github.com:michaelliao/learngit.git\n   ```\n\n2. 关联后，使用命令`git push -u origin master`第一次推送master分支的所有内容；\n\n3. 此后，每次本地提交后，只要有必要，就可以使用命令`git push origin master`推送最新修改；\n\n# 8 克隆远程库\n\nGit支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。\n\n```shell\n$ git clone git@github.com:michaelliao/gitskills.git\n```\n\n# 9 分支\n\n## 9.1 命令\n\n查看分支：`git branch`\n\n创建分支：`git branch <name>`\n\n切换分支：`git checkout <name>`或者`git switch <name>`\n\n创建+切换分支：`git checkout -b <name>`或者`git switch -c <name>`\n\n合并某分支到当前分支：`git merge <name>`\n\n删除分支：`git branch -d <name>`\n\n通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。具体的`git merge --no-ff -m \"merge with no-ff\" dev`，加上--no-ff选项。\n\n## 9.2 分支管理\n\nmaster分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。  \n\n所以，团队合作的分支看起来就像这样：\n\n![](./git学习整理/1829507-20220316234843811-601091411.png)\n\n## 9.3 bug分支\n\n修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；\n\n当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；\n\n在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick 命令，把bug提交的修改“复制”到当前分支，避免重复劳动。\n\n具体可以参考：https://www.liaoxuefeng.com/wiki/896043488029600/900388704535136\n\n## 9.4 feature分支\n\n开发一个新feature，最好新建一个分支，开发完可以合并到dev分支；\n\n如果要丢弃一个没有被合并过的分支，可以通过git branch -D 强行删除。\n\n# 10 多人协作\n\n多人协作的工作模式通常是这样：\n\n- 首先，可以试图用git push origin 推送自己的修改；\n- 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n- 如果合并有冲突，则解决冲突，并在本地提交；\n- 没有冲突或者解决掉冲突后，再用git push origin 推送就能成功！\n- 如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to origin/。\n\n多人协作重点：\n\n- 查看远程库信息，使用git remote -v；\n- 本地新建的分支如果不推送到远程，对其他人就是不可见的；\n- 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；\n- 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\n- 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；\n- 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n\n# 11 标签\n\n命令git tag 用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n\n命令git tag -a -m \"blablabla...\"可以指定标签信息；\n\n命令git tag可以查看所有标签。\n\n命令git push origin 可以推送一个本地标签；\n\n命令git push origin --tags可以推送全部未推送过的本地标签；\n\n命令git tag -d 可以删除一个本地标签；\n\n命令git push origin :refs/tags/可以删除一个远程标签。\n\n# 12 使用github\n\n在GitHub上，可以任意Fork开源仓库，复制到自己的仓库；\n\n自己拥有Fork后的仓库的读写权限；\n\n可以推送pull request给官方仓库来贡献代码。\n\n# 13 参考\n\n[Git教程 - 廖雪峰的官方网站 (liaoxuefeng.com)](https://www.liaoxuefeng.com/wiki/896043488029600)\n","source":"_posts/git学习整理.md","raw":"---\ntitle: git学习整理\ndate: 2022-09-25 20:06:06\ncategories: \n- svn\ntags: \n- git\n---\n\n# 1 创建版本库\n\n版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。\n\n初始化一个Git仓库，使用`git init`命令。\n\n添加文件到Git仓库，分两步：\n\n1. 使用命令`git add 文件名`，注意，可反复多次使用，添加多个文件，此时文件放到了缓存区；\n2. 使用命令`git commit -m \"提交信息\"`，完成，此时文件从缓存区被放到了head指定的当前分支中。\n\n# 2 查看工作区状态与提交修改\n\n要随时掌握工作区的状态，使用`git status`命令。\n\n如果git status告诉你有文件被修改过，用`git diff`可以查看修改内容。\n\n提交修改与添加文件的步骤一样\n\n```\n git add 文件名\n git commit -m \"add a line\"\n```\n\n将暂存区的版本提交到版本库,从而形成工作区->暂存区->版本库的基本链路,本地工作区的版本控制流程大致如此.\n\n# 3 版本切换\n\nHEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令`git reset --hard commit_id`（commit_id可以输入前几位就行）。\n\n穿梭前，用`git log`可以查看提交历史，以便确定要回退到哪个版本。\n\n要重返未来，用`git reflog`查看命令历史，以便确定要回到未来的哪个版本。\n\n# 4 多次修改\n\n第一次修改 -> git add -> 第二次修改 -> git add -> git commit\n\n# 5 修改撤销\n\n- 场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令`git checkout -- file`。\n- 场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令`git reset HEAD` ，就回到了场景1，第二步按场景1操作。\n- 场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考**版本切换**一节，不过前提是没有推送到远程库。\n\n# 6 删除文件\n\n如果在本地删除了文件，可以通过以下操作在git库里删除  \n\n`git rm test.txt`  \n\n`git commit -m \"remove test.txt\"`  \n\n可以通过以下操作恢复，相当于是让工作目录test.txt恢复到暂存区中test.txt的状态\n\n`git checkout -- test.txt`\n\n# 7 添加远程库\n\n把本地库的内容推送到远程，用git push命令，实际上是把指定分支推送到远程。  \n\n由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。\n\n1. 要关联一个远程库，使用命令\n   \n   ```\n   git remote add origin git@server-name:path/repo-name.git\n   ```\n   \n   例如：\n   \n   ```\n   git remote add origin git@github.com:michaelliao/learngit.git\n   ```\n\n2. 关联后，使用命令`git push -u origin master`第一次推送master分支的所有内容；\n\n3. 此后，每次本地提交后，只要有必要，就可以使用命令`git push origin master`推送最新修改；\n\n# 8 克隆远程库\n\nGit支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。\n\n```shell\n$ git clone git@github.com:michaelliao/gitskills.git\n```\n\n# 9 分支\n\n## 9.1 命令\n\n查看分支：`git branch`\n\n创建分支：`git branch <name>`\n\n切换分支：`git checkout <name>`或者`git switch <name>`\n\n创建+切换分支：`git checkout -b <name>`或者`git switch -c <name>`\n\n合并某分支到当前分支：`git merge <name>`\n\n删除分支：`git branch -d <name>`\n\n通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。具体的`git merge --no-ff -m \"merge with no-ff\" dev`，加上--no-ff选项。\n\n## 9.2 分支管理\n\nmaster分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。  \n\n所以，团队合作的分支看起来就像这样：\n\n![](./git学习整理/1829507-20220316234843811-601091411.png)\n\n## 9.3 bug分支\n\n修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；\n\n当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；\n\n在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick 命令，把bug提交的修改“复制”到当前分支，避免重复劳动。\n\n具体可以参考：https://www.liaoxuefeng.com/wiki/896043488029600/900388704535136\n\n## 9.4 feature分支\n\n开发一个新feature，最好新建一个分支，开发完可以合并到dev分支；\n\n如果要丢弃一个没有被合并过的分支，可以通过git branch -D 强行删除。\n\n# 10 多人协作\n\n多人协作的工作模式通常是这样：\n\n- 首先，可以试图用git push origin 推送自己的修改；\n- 如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；\n- 如果合并有冲突，则解决冲突，并在本地提交；\n- 没有冲突或者解决掉冲突后，再用git push origin 推送就能成功！\n- 如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch --set-upstream-to origin/。\n\n多人协作重点：\n\n- 查看远程库信息，使用git remote -v；\n- 本地新建的分支如果不推送到远程，对其他人就是不可见的；\n- 从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；\n- 在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin/branch-name，本地和远程分支的名称最好一致；\n- 建立本地分支和远程分支的关联，使用git branch --set-upstream branch-name origin/branch-name；\n- 从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。\n\n# 11 标签\n\n命令git tag 用于新建一个标签，默认为HEAD，也可以指定一个commit id；\n\n命令git tag -a -m \"blablabla...\"可以指定标签信息；\n\n命令git tag可以查看所有标签。\n\n命令git push origin 可以推送一个本地标签；\n\n命令git push origin --tags可以推送全部未推送过的本地标签；\n\n命令git tag -d 可以删除一个本地标签；\n\n命令git push origin :refs/tags/可以删除一个远程标签。\n\n# 12 使用github\n\n在GitHub上，可以任意Fork开源仓库，复制到自己的仓库；\n\n自己拥有Fork后的仓库的读写权限；\n\n可以推送pull request给官方仓库来贡献代码。\n\n# 13 参考\n\n[Git教程 - 廖雪峰的官方网站 (liaoxuefeng.com)](https://www.liaoxuefeng.com/wiki/896043488029600)\n","slug":"git学习整理","published":1,"updated":"2022-10-08T14:53:00.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl91f3chw0005egoi9d4j5xaz","content":"<h1 id=\"1-创建版本库\"><a href=\"#1-创建版本库\" class=\"headerlink\" title=\"1 创建版本库\"></a>1 创建版本库</h1><p>版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>\n<p>初始化一个Git仓库，使用<code>git init</code>命令。</p>\n<p>添加文件到Git仓库，分两步：</p>\n<ol>\n<li>使用命令<code>git add 文件名</code>，注意，可反复多次使用，添加多个文件，此时文件放到了缓存区；</li>\n<li>使用命令<code>git commit -m &quot;提交信息&quot;</code>，完成，此时文件从缓存区被放到了head指定的当前分支中。</li>\n</ol>\n<h1 id=\"2-查看工作区状态与提交修改\"><a href=\"#2-查看工作区状态与提交修改\" class=\"headerlink\" title=\"2 查看工作区状态与提交修改\"></a>2 查看工作区状态与提交修改</h1><p>要随时掌握工作区的状态，使用<code>git status</code>命令。</p>\n<p>如果git status告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</p>\n<p>提交修改与添加文件的步骤一样</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">git <span class=\"hljs-keyword\">add</span> 文件名<br>git <span class=\"hljs-keyword\">commit</span> -m &quot;add a line&quot;<br></code></pre></td></tr></table></figure>\n\n<p>将暂存区的版本提交到版本库,从而形成工作区-&gt;暂存区-&gt;版本库的基本链路,本地工作区的版本控制流程大致如此.</p>\n<h1 id=\"3-版本切换\"><a href=\"#3-版本切换\" class=\"headerlink\" title=\"3 版本切换\"></a>3 版本切换</h1><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>（commit_id可以输入前几位就行）。</p>\n<p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</p>\n<p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p>\n<h1 id=\"4-多次修改\"><a href=\"#4-多次修改\" class=\"headerlink\" title=\"4 多次修改\"></a>4 多次修改</h1><p>第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git add -&gt; git commit</p>\n<h1 id=\"5-修改撤销\"><a href=\"#5-修改撤销\" class=\"headerlink\" title=\"5 修改撤销\"></a>5 修改撤销</h1><ul>\n<li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</li>\n<li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD</code> ，就回到了场景1，第二步按场景1操作。</li>\n<li>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<strong>版本切换</strong>一节，不过前提是没有推送到远程库。</li>\n</ul>\n<h1 id=\"6-删除文件\"><a href=\"#6-删除文件\" class=\"headerlink\" title=\"6 删除文件\"></a>6 删除文件</h1><p>如果在本地删除了文件，可以通过以下操作在git库里删除  </p>\n<p><code>git rm test.txt</code>  </p>\n<p><code>git commit -m &quot;remove test.txt&quot;</code>  </p>\n<p>可以通过以下操作恢复，相当于是让工作目录test.txt恢复到暂存区中test.txt的状态</p>\n<p><code>git checkout -- test.txt</code></p>\n<h1 id=\"7-添加远程库\"><a href=\"#7-添加远程库\" class=\"headerlink\" title=\"7 添加远程库\"></a>7 添加远程库</h1><p>把本地库的内容推送到远程，用git push命令，实际上是把指定分支推送到远程。  </p>\n<p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n<ol>\n<li><p>要关联一个远程库，使用命令</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">git remote <span class=\"hljs-keyword\">add</span> origin git@<span class=\"hljs-keyword\">server</span>-<span class=\"hljs-type\">name</span>:<span class=\"hljs-type\">path</span>/repo-<span class=\"hljs-type\">name</span>.git<br></code></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\">git remote <span class=\"hljs-keyword\">add</span><span class=\"language-bash\"> origin git@github.com:michaelliao/learngit.git</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p>\n</li>\n<li><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p>\n</li>\n</ol>\n<h1 id=\"8-克隆远程库\"><a href=\"#8-克隆远程库\" class=\"headerlink\" title=\"8 克隆远程库\"></a>8 克隆远程库</h1><p>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"hljs-built_in\">clone</span> git@github.com:michaelliao/gitskills.git</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"9-分支\"><a href=\"#9-分支\" class=\"headerlink\" title=\"9 分支\"></a>9 分支</h1><h2 id=\"9-1-命令\"><a href=\"#9-1-命令\" class=\"headerlink\" title=\"9.1 命令\"></a>9.1 命令</h2><p>查看分支：<code>git branch</code></p>\n<p>创建分支：<code>git branch &lt;name&gt;</code></p>\n<p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p>\n<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p>\n<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>\n<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>\n<p>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。具体的<code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code>，加上–no-ff选项。</p>\n<h2 id=\"9-2-分支管理\"><a href=\"#9-2-分支管理\" class=\"headerlink\" title=\"9.2 分支管理\"></a>9.2 分支管理</h2><p>master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。  </p>\n<p>所以，团队合作的分支看起来就像这样：</p>\n<p><img src=\"/2022/09/25/git%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/1829507-20220316234843811-601091411.png\"></p>\n<h2 id=\"9-3-bug分支\"><a href=\"#9-3-bug分支\" class=\"headerlink\" title=\"9.3 bug分支\"></a>9.3 bug分支</h2><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p>\n<p>当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；</p>\n<p>在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick 命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</p>\n<p>具体可以参考：<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/900388704535136\">https://www.liaoxuefeng.com/wiki/896043488029600/900388704535136</a></p>\n<h2 id=\"9-4-feature分支\"><a href=\"#9-4-feature分支\" class=\"headerlink\" title=\"9.4 feature分支\"></a>9.4 feature分支</h2><p>开发一个新feature，最好新建一个分支，开发完可以合并到dev分支；</p>\n<p>如果要丢弃一个没有被合并过的分支，可以通过git branch -D 强行删除。</p>\n<h1 id=\"10-多人协作\"><a href=\"#10-多人协作\" class=\"headerlink\" title=\"10 多人协作\"></a>10 多人协作</h1><p>多人协作的工作模式通常是这样：</p>\n<ul>\n<li>首先，可以试图用git push origin 推送自己的修改；</li>\n<li>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</li>\n<li>如果合并有冲突，则解决冲突，并在本地提交；</li>\n<li>没有冲突或者解决掉冲突后，再用git push origin 推送就能成功！</li>\n<li>如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream-to origin&#x2F;。</li>\n</ul>\n<p>多人协作重点：</p>\n<ul>\n<li>查看远程库信息，使用git remote -v；</li>\n<li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li>\n<li>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</li>\n<li>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin&#x2F;branch-name，本地和远程分支的名称最好一致；</li>\n<li>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin&#x2F;branch-name；</li>\n<li>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</li>\n</ul>\n<h1 id=\"11-标签\"><a href=\"#11-标签\" class=\"headerlink\" title=\"11 标签\"></a>11 标签</h1><p>命令git tag 用于新建一个标签，默认为HEAD，也可以指定一个commit id；</p>\n<p>命令git tag -a -m “blablabla…”可以指定标签信息；</p>\n<p>命令git tag可以查看所有标签。</p>\n<p>命令git push origin 可以推送一个本地标签；</p>\n<p>命令git push origin –tags可以推送全部未推送过的本地标签；</p>\n<p>命令git tag -d 可以删除一个本地标签；</p>\n<p>命令git push origin :refs&#x2F;tags&#x2F;可以删除一个远程标签。</p>\n<h1 id=\"12-使用github\"><a href=\"#12-使用github\" class=\"headerlink\" title=\"12 使用github\"></a>12 使用github</h1><p>在GitHub上，可以任意Fork开源仓库，复制到自己的仓库；</p>\n<p>自己拥有Fork后的仓库的读写权限；</p>\n<p>可以推送pull request给官方仓库来贡献代码。</p>\n<h1 id=\"13-参考\"><a href=\"#13-参考\" class=\"headerlink\" title=\"13 参考\"></a>13 参考</h1><p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\">Git教程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p>\n","site":{"data":{}},"wordcount":3295,"excerpt":"","more":"<h1 id=\"1-创建版本库\"><a href=\"#1-创建版本库\" class=\"headerlink\" title=\"1 创建版本库\"></a>1 创建版本库</h1><p>版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。</p>\n<p>初始化一个Git仓库，使用<code>git init</code>命令。</p>\n<p>添加文件到Git仓库，分两步：</p>\n<ol>\n<li>使用命令<code>git add 文件名</code>，注意，可反复多次使用，添加多个文件，此时文件放到了缓存区；</li>\n<li>使用命令<code>git commit -m &quot;提交信息&quot;</code>，完成，此时文件从缓存区被放到了head指定的当前分支中。</li>\n</ol>\n<h1 id=\"2-查看工作区状态与提交修改\"><a href=\"#2-查看工作区状态与提交修改\" class=\"headerlink\" title=\"2 查看工作区状态与提交修改\"></a>2 查看工作区状态与提交修改</h1><p>要随时掌握工作区的状态，使用<code>git status</code>命令。</p>\n<p>如果git status告诉你有文件被修改过，用<code>git diff</code>可以查看修改内容。</p>\n<p>提交修改与添加文件的步骤一样</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">git <span class=\"hljs-keyword\">add</span> 文件名<br>git <span class=\"hljs-keyword\">commit</span> -m &quot;add a line&quot;<br></code></pre></td></tr></table></figure>\n\n<p>将暂存区的版本提交到版本库,从而形成工作区-&gt;暂存区-&gt;版本库的基本链路,本地工作区的版本控制流程大致如此.</p>\n<h1 id=\"3-版本切换\"><a href=\"#3-版本切换\" class=\"headerlink\" title=\"3 版本切换\"></a>3 版本切换</h1><p>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令<code>git reset --hard commit_id</code>（commit_id可以输入前几位就行）。</p>\n<p>穿梭前，用<code>git log</code>可以查看提交历史，以便确定要回退到哪个版本。</p>\n<p>要重返未来，用<code>git reflog</code>查看命令历史，以便确定要回到未来的哪个版本。</p>\n<h1 id=\"4-多次修改\"><a href=\"#4-多次修改\" class=\"headerlink\" title=\"4 多次修改\"></a>4 多次修改</h1><p>第一次修改 -&gt; git add -&gt; 第二次修改 -&gt; git add -&gt; git commit</p>\n<h1 id=\"5-修改撤销\"><a href=\"#5-修改撤销\" class=\"headerlink\" title=\"5 修改撤销\"></a>5 修改撤销</h1><ul>\n<li>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令<code>git checkout -- file</code>。</li>\n<li>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令<code>git reset HEAD</code> ，就回到了场景1，第二步按场景1操作。</li>\n<li>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考<strong>版本切换</strong>一节，不过前提是没有推送到远程库。</li>\n</ul>\n<h1 id=\"6-删除文件\"><a href=\"#6-删除文件\" class=\"headerlink\" title=\"6 删除文件\"></a>6 删除文件</h1><p>如果在本地删除了文件，可以通过以下操作在git库里删除  </p>\n<p><code>git rm test.txt</code>  </p>\n<p><code>git commit -m &quot;remove test.txt&quot;</code>  </p>\n<p>可以通过以下操作恢复，相当于是让工作目录test.txt恢复到暂存区中test.txt的状态</p>\n<p><code>git checkout -- test.txt</code></p>\n<h1 id=\"7-添加远程库\"><a href=\"#7-添加远程库\" class=\"headerlink\" title=\"7 添加远程库\"></a>7 添加远程库</h1><p>把本地库的内容推送到远程，用git push命令，实际上是把指定分支推送到远程。  </p>\n<p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>\n<ol>\n<li><p>要关联一个远程库，使用命令</p>\n<figure class=\"highlight pgsql\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs pgsql\">git remote <span class=\"hljs-keyword\">add</span> origin git@<span class=\"hljs-keyword\">server</span>-<span class=\"hljs-type\">name</span>:<span class=\"hljs-type\">path</span>/repo-<span class=\"hljs-type\">name</span>.git<br></code></pre></td></tr></table></figure>\n\n<p>例如：</p>\n<figure class=\"highlight dockerfile\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs dockerfile\">git remote <span class=\"hljs-keyword\">add</span><span class=\"language-bash\"> origin git@github.com:michaelliao/learngit.git</span><br></code></pre></td></tr></table></figure>\n</li>\n<li><p>关联后，使用命令<code>git push -u origin master</code>第一次推送master分支的所有内容；</p>\n</li>\n<li><p>此后，每次本地提交后，只要有必要，就可以使用命令<code>git push origin master</code>推送最新修改；</p>\n</li>\n</ol>\n<h1 id=\"8-克隆远程库\"><a href=\"#8-克隆远程库\" class=\"headerlink\" title=\"8 克隆远程库\"></a>8 克隆远程库</h1><p>Git支持多种协议，包括https，但通过ssh支持的原生git协议速度最快。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs shell\"><span class=\"hljs-meta prompt_\">$ </span><span class=\"language-bash\">git <span class=\"hljs-built_in\">clone</span> git@github.com:michaelliao/gitskills.git</span><br></code></pre></td></tr></table></figure>\n\n<h1 id=\"9-分支\"><a href=\"#9-分支\" class=\"headerlink\" title=\"9 分支\"></a>9 分支</h1><h2 id=\"9-1-命令\"><a href=\"#9-1-命令\" class=\"headerlink\" title=\"9.1 命令\"></a>9.1 命令</h2><p>查看分支：<code>git branch</code></p>\n<p>创建分支：<code>git branch &lt;name&gt;</code></p>\n<p>切换分支：<code>git checkout &lt;name&gt;</code>或者<code>git switch &lt;name&gt;</code></p>\n<p>创建+切换分支：<code>git checkout -b &lt;name&gt;</code>或者<code>git switch -c &lt;name&gt;</code></p>\n<p>合并某分支到当前分支：<code>git merge &lt;name&gt;</code></p>\n<p>删除分支：<code>git branch -d &lt;name&gt;</code></p>\n<p>通常，合并分支时，如果可能，Git会用Fast forward模式，但这种模式下，删除分支后，会丢掉分支信息。如果要强制禁用Fast forward模式，Git就会在merge时生成一个新的commit，这样，从分支历史上就可以看出分支信息。具体的<code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code>，加上–no-ff选项。</p>\n<h2 id=\"9-2-分支管理\"><a href=\"#9-2-分支管理\" class=\"headerlink\" title=\"9.2 分支管理\"></a>9.2 分支管理</h2><p>master分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；干活都在dev分支上，也就是说，dev分支是不稳定的，到某个时候比如1.0版本发布时，再把dev分支合并到master上，在master分支发布1.0版本；每个人都在dev分支上干活，每个人都有自己的分支，时不时地往dev分支上合并就可以了。  </p>\n<p>所以，团队合作的分支看起来就像这样：</p>\n<p><img src=\"/2022/09/25/git%E5%AD%A6%E4%B9%A0%E6%95%B4%E7%90%86/1829507-20220316234843811-601091411.png\"></p>\n<h2 id=\"9-3-bug分支\"><a href=\"#9-3-bug分支\" class=\"headerlink\" title=\"9.3 bug分支\"></a>9.3 bug分支</h2><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p>\n<p>当手头工作没有完成时，先把工作现场git stash一下，然后去修复bug，修复后，再git stash pop，回到工作现场；</p>\n<p>在master分支上修复的bug，想要合并到当前dev分支，可以用git cherry-pick 命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</p>\n<p>具体可以参考：<a href=\"https://www.liaoxuefeng.com/wiki/896043488029600/900388704535136\">https://www.liaoxuefeng.com/wiki/896043488029600/900388704535136</a></p>\n<h2 id=\"9-4-feature分支\"><a href=\"#9-4-feature分支\" class=\"headerlink\" title=\"9.4 feature分支\"></a>9.4 feature分支</h2><p>开发一个新feature，最好新建一个分支，开发完可以合并到dev分支；</p>\n<p>如果要丢弃一个没有被合并过的分支，可以通过git branch -D 强行删除。</p>\n<h1 id=\"10-多人协作\"><a href=\"#10-多人协作\" class=\"headerlink\" title=\"10 多人协作\"></a>10 多人协作</h1><p>多人协作的工作模式通常是这样：</p>\n<ul>\n<li>首先，可以试图用git push origin 推送自己的修改；</li>\n<li>如果推送失败，则因为远程分支比你的本地更新，需要先用git pull试图合并；</li>\n<li>如果合并有冲突，则解决冲突，并在本地提交；</li>\n<li>没有冲突或者解决掉冲突后，再用git push origin 推送就能成功！</li>\n<li>如果git pull提示no tracking information，则说明本地分支和远程分支的链接关系没有创建，用命令git branch –set-upstream-to origin&#x2F;。</li>\n</ul>\n<p>多人协作重点：</p>\n<ul>\n<li>查看远程库信息，使用git remote -v；</li>\n<li>本地新建的分支如果不推送到远程，对其他人就是不可见的；</li>\n<li>从本地推送分支，使用git push origin branch-name，如果推送失败，先用git pull抓取远程的新提交；</li>\n<li>在本地创建和远程分支对应的分支，使用git checkout -b branch-name origin&#x2F;branch-name，本地和远程分支的名称最好一致；</li>\n<li>建立本地分支和远程分支的关联，使用git branch –set-upstream branch-name origin&#x2F;branch-name；</li>\n<li>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</li>\n</ul>\n<h1 id=\"11-标签\"><a href=\"#11-标签\" class=\"headerlink\" title=\"11 标签\"></a>11 标签</h1><p>命令git tag 用于新建一个标签，默认为HEAD，也可以指定一个commit id；</p>\n<p>命令git tag -a -m “blablabla…”可以指定标签信息；</p>\n<p>命令git tag可以查看所有标签。</p>\n<p>命令git push origin 可以推送一个本地标签；</p>\n<p>命令git push origin –tags可以推送全部未推送过的本地标签；</p>\n<p>命令git tag -d 可以删除一个本地标签；</p>\n<p>命令git push origin :refs&#x2F;tags&#x2F;可以删除一个远程标签。</p>\n<h1 id=\"12-使用github\"><a href=\"#12-使用github\" class=\"headerlink\" title=\"12 使用github\"></a>12 使用github</h1><p>在GitHub上，可以任意Fork开源仓库，复制到自己的仓库；</p>\n<p>自己拥有Fork后的仓库的读写权限；</p>\n<p>可以推送pull request给官方仓库来贡献代码。</p>\n<h1 id=\"13-参考\"><a href=\"#13-参考\" class=\"headerlink\" title=\"13 参考\"></a>13 参考</h1><p><a href=\"https://www.liaoxuefeng.com/wiki/896043488029600\">Git教程 - 廖雪峰的官方网站 (liaoxuefeng.com)</a></p>\n"},{"title":"人生的智慧","date":"2022-09-11T14:00:57.000Z","_content":"\n# 1 信息\n\n《人生的智慧》 阿图尔·叔本华 湖南人民出版社\n\n# 2 摘录\n\n- 幸福的首要因素，甚至，一个人此生存在的主要意义，是由他的内在机制决定的；一个人内心满足与否，取决于他的情感、欲望和思想共同作用的结果，外在环境对人只起到了间接调节的作用。我们年轻时几乎意识不到的一点是，最高级最丰富且最持久的乐趣来源于思想，思想力量的强弱决定了乐趣大小。身外之物对幸福的影响太微弱，大多数无须为生计发愁的人们由于内在贫乏，跟那些生活在底层为生计奔波劳碌的人们一样的感觉不幸福。他们头脑空洞、想象力贫瘠、精神空虚，只好与跟自己相似的人为伍，正所谓“物以类聚，人以群分”——他们聚在一起追求消遣娱乐，纵情感官享受，最后以荒唐告终。\n- 幸福的本质在于“人”，那么集中精力保持身体健康、培养能力，无疑要比一心积累财富更明智，但千万不要误以为我们就应该忽略掉对生活必需品的获取。身心健康是幸福的首要关键，最愚蠢的事就是牺牲自己的健康去追求任何其他一时的快活，不管是为了利益、升迁、学问还是名气，甚至为了转瞬即逝的感官乐趣糟蹋自己的健康，都是愚不可及的行为。\n- 实际上，生活就像是钟摆一般，在这两端之间或激烈或温和地来回摇摆——要么痛苦，要么无聊，反正总有一项逃不掉。究其根源，痛苦和无聊是一种双重对立的存在，一是外部的或客观的，一是内在的或主观的。匮乏的环境和贫穷会导致痛苦；而一个人衣食无忧，那么他就会无聊。这样的不幸只能靠内在的力量，亦即精神财富来抵御。\n- 人类有两大最常见的愚蠢，第一是“不是在他自身的本质中去寻求幸福，而是在别人看待‘他是什么’中求幸福”，就是说太在意别人的看法，为别人而活。第二是牺牲健康去谋求别的东西，不明白一个健康的乞丐比疾病的国王要幸福。“人是什么”比“人有什么”，要重要得多。在是否幸福这件事情上，个人的人格、气质、心态、信仰，比汽车、房子、珠宝等更为重要。也就是说，你的个性才是最宝贵的财富。你需要去追求物质、名誉，但你更需要追求的，是你独立而健康的个性。正是在这个意义上，叔本华才会说：“个性远比民族性更重要。最廉价的骄傲是民族骄傲，也就是所谓的‘民族自豪感’——如果一个人号称为他的国家或民族自豪，那只能说明他本身并没有什么可值得骄傲的，否则也不会抓着那些千百万人共有的东西引以为荣了。”\n\n# 3 感想\n\n幸福的本质在于“人”。首先是需要保障身体健康，保持适当的锻炼，任何事情都要给健康让路，不管是利益、升迁、学问还是名气；其次需要持之以恒地提升内心精神境界并汲取知识，去观赏大自然的鬼斧神工和历史上的伟大成就，像雕琢艺术品一样构建自己的内心世界；不要过多地在意外界的看法，克制嫉妒等不良情绪，减少不必要的痛苦.\n","source":"_posts/人生的智慧.md","raw":"---\ntitle: 人生的智慧\ndate: 2022-09-11 22:00:57\ncategories: \n- 读书\ntags: \n- 读书与做人\n---\n\n# 1 信息\n\n《人生的智慧》 阿图尔·叔本华 湖南人民出版社\n\n# 2 摘录\n\n- 幸福的首要因素，甚至，一个人此生存在的主要意义，是由他的内在机制决定的；一个人内心满足与否，取决于他的情感、欲望和思想共同作用的结果，外在环境对人只起到了间接调节的作用。我们年轻时几乎意识不到的一点是，最高级最丰富且最持久的乐趣来源于思想，思想力量的强弱决定了乐趣大小。身外之物对幸福的影响太微弱，大多数无须为生计发愁的人们由于内在贫乏，跟那些生活在底层为生计奔波劳碌的人们一样的感觉不幸福。他们头脑空洞、想象力贫瘠、精神空虚，只好与跟自己相似的人为伍，正所谓“物以类聚，人以群分”——他们聚在一起追求消遣娱乐，纵情感官享受，最后以荒唐告终。\n- 幸福的本质在于“人”，那么集中精力保持身体健康、培养能力，无疑要比一心积累财富更明智，但千万不要误以为我们就应该忽略掉对生活必需品的获取。身心健康是幸福的首要关键，最愚蠢的事就是牺牲自己的健康去追求任何其他一时的快活，不管是为了利益、升迁、学问还是名气，甚至为了转瞬即逝的感官乐趣糟蹋自己的健康，都是愚不可及的行为。\n- 实际上，生活就像是钟摆一般，在这两端之间或激烈或温和地来回摇摆——要么痛苦，要么无聊，反正总有一项逃不掉。究其根源，痛苦和无聊是一种双重对立的存在，一是外部的或客观的，一是内在的或主观的。匮乏的环境和贫穷会导致痛苦；而一个人衣食无忧，那么他就会无聊。这样的不幸只能靠内在的力量，亦即精神财富来抵御。\n- 人类有两大最常见的愚蠢，第一是“不是在他自身的本质中去寻求幸福，而是在别人看待‘他是什么’中求幸福”，就是说太在意别人的看法，为别人而活。第二是牺牲健康去谋求别的东西，不明白一个健康的乞丐比疾病的国王要幸福。“人是什么”比“人有什么”，要重要得多。在是否幸福这件事情上，个人的人格、气质、心态、信仰，比汽车、房子、珠宝等更为重要。也就是说，你的个性才是最宝贵的财富。你需要去追求物质、名誉，但你更需要追求的，是你独立而健康的个性。正是在这个意义上，叔本华才会说：“个性远比民族性更重要。最廉价的骄傲是民族骄傲，也就是所谓的‘民族自豪感’——如果一个人号称为他的国家或民族自豪，那只能说明他本身并没有什么可值得骄傲的，否则也不会抓着那些千百万人共有的东西引以为荣了。”\n\n# 3 感想\n\n幸福的本质在于“人”。首先是需要保障身体健康，保持适当的锻炼，任何事情都要给健康让路，不管是利益、升迁、学问还是名气；其次需要持之以恒地提升内心精神境界并汲取知识，去观赏大自然的鬼斧神工和历史上的伟大成就，像雕琢艺术品一样构建自己的内心世界；不要过多地在意外界的看法，克制嫉妒等不良情绪，减少不必要的痛苦.\n","slug":"人生的智慧","published":1,"updated":"2022-10-08T14:02:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl91f3chx0006egoif0fsc3qx","content":"<h1 id=\"1-信息\"><a href=\"#1-信息\" class=\"headerlink\" title=\"1 信息\"></a>1 信息</h1><p>《人生的智慧》 阿图尔·叔本华 湖南人民出版社</p>\n<h1 id=\"2-摘录\"><a href=\"#2-摘录\" class=\"headerlink\" title=\"2 摘录\"></a>2 摘录</h1><ul>\n<li>幸福的首要因素，甚至，一个人此生存在的主要意义，是由他的内在机制决定的；一个人内心满足与否，取决于他的情感、欲望和思想共同作用的结果，外在环境对人只起到了间接调节的作用。我们年轻时几乎意识不到的一点是，最高级最丰富且最持久的乐趣来源于思想，思想力量的强弱决定了乐趣大小。身外之物对幸福的影响太微弱，大多数无须为生计发愁的人们由于内在贫乏，跟那些生活在底层为生计奔波劳碌的人们一样的感觉不幸福。他们头脑空洞、想象力贫瘠、精神空虚，只好与跟自己相似的人为伍，正所谓“物以类聚，人以群分”——他们聚在一起追求消遣娱乐，纵情感官享受，最后以荒唐告终。</li>\n<li>幸福的本质在于“人”，那么集中精力保持身体健康、培养能力，无疑要比一心积累财富更明智，但千万不要误以为我们就应该忽略掉对生活必需品的获取。身心健康是幸福的首要关键，最愚蠢的事就是牺牲自己的健康去追求任何其他一时的快活，不管是为了利益、升迁、学问还是名气，甚至为了转瞬即逝的感官乐趣糟蹋自己的健康，都是愚不可及的行为。</li>\n<li>实际上，生活就像是钟摆一般，在这两端之间或激烈或温和地来回摇摆——要么痛苦，要么无聊，反正总有一项逃不掉。究其根源，痛苦和无聊是一种双重对立的存在，一是外部的或客观的，一是内在的或主观的。匮乏的环境和贫穷会导致痛苦；而一个人衣食无忧，那么他就会无聊。这样的不幸只能靠内在的力量，亦即精神财富来抵御。</li>\n<li>人类有两大最常见的愚蠢，第一是“不是在他自身的本质中去寻求幸福，而是在别人看待‘他是什么’中求幸福”，就是说太在意别人的看法，为别人而活。第二是牺牲健康去谋求别的东西，不明白一个健康的乞丐比疾病的国王要幸福。“人是什么”比“人有什么”，要重要得多。在是否幸福这件事情上，个人的人格、气质、心态、信仰，比汽车、房子、珠宝等更为重要。也就是说，你的个性才是最宝贵的财富。你需要去追求物质、名誉，但你更需要追求的，是你独立而健康的个性。正是在这个意义上，叔本华才会说：“个性远比民族性更重要。最廉价的骄傲是民族骄傲，也就是所谓的‘民族自豪感’——如果一个人号称为他的国家或民族自豪，那只能说明他本身并没有什么可值得骄傲的，否则也不会抓着那些千百万人共有的东西引以为荣了。”</li>\n</ul>\n<h1 id=\"3-感想\"><a href=\"#3-感想\" class=\"headerlink\" title=\"3 感想\"></a>3 感想</h1><p>幸福的本质在于“人”。首先是需要保障身体健康，保持适当的锻炼，任何事情都要给健康让路，不管是利益、升迁、学问还是名气；其次需要持之以恒地提升内心精神境界并汲取知识，去观赏大自然的鬼斧神工和历史上的伟大成就，像雕琢艺术品一样构建自己的内心世界；不要过多地在意外界的看法，克制嫉妒等不良情绪，减少不必要的痛苦.</p>\n","site":{"data":{}},"wordcount":1094,"excerpt":"","more":"<h1 id=\"1-信息\"><a href=\"#1-信息\" class=\"headerlink\" title=\"1 信息\"></a>1 信息</h1><p>《人生的智慧》 阿图尔·叔本华 湖南人民出版社</p>\n<h1 id=\"2-摘录\"><a href=\"#2-摘录\" class=\"headerlink\" title=\"2 摘录\"></a>2 摘录</h1><ul>\n<li>幸福的首要因素，甚至，一个人此生存在的主要意义，是由他的内在机制决定的；一个人内心满足与否，取决于他的情感、欲望和思想共同作用的结果，外在环境对人只起到了间接调节的作用。我们年轻时几乎意识不到的一点是，最高级最丰富且最持久的乐趣来源于思想，思想力量的强弱决定了乐趣大小。身外之物对幸福的影响太微弱，大多数无须为生计发愁的人们由于内在贫乏，跟那些生活在底层为生计奔波劳碌的人们一样的感觉不幸福。他们头脑空洞、想象力贫瘠、精神空虚，只好与跟自己相似的人为伍，正所谓“物以类聚，人以群分”——他们聚在一起追求消遣娱乐，纵情感官享受，最后以荒唐告终。</li>\n<li>幸福的本质在于“人”，那么集中精力保持身体健康、培养能力，无疑要比一心积累财富更明智，但千万不要误以为我们就应该忽略掉对生活必需品的获取。身心健康是幸福的首要关键，最愚蠢的事就是牺牲自己的健康去追求任何其他一时的快活，不管是为了利益、升迁、学问还是名气，甚至为了转瞬即逝的感官乐趣糟蹋自己的健康，都是愚不可及的行为。</li>\n<li>实际上，生活就像是钟摆一般，在这两端之间或激烈或温和地来回摇摆——要么痛苦，要么无聊，反正总有一项逃不掉。究其根源，痛苦和无聊是一种双重对立的存在，一是外部的或客观的，一是内在的或主观的。匮乏的环境和贫穷会导致痛苦；而一个人衣食无忧，那么他就会无聊。这样的不幸只能靠内在的力量，亦即精神财富来抵御。</li>\n<li>人类有两大最常见的愚蠢，第一是“不是在他自身的本质中去寻求幸福，而是在别人看待‘他是什么’中求幸福”，就是说太在意别人的看法，为别人而活。第二是牺牲健康去谋求别的东西，不明白一个健康的乞丐比疾病的国王要幸福。“人是什么”比“人有什么”，要重要得多。在是否幸福这件事情上，个人的人格、气质、心态、信仰，比汽车、房子、珠宝等更为重要。也就是说，你的个性才是最宝贵的财富。你需要去追求物质、名誉，但你更需要追求的，是你独立而健康的个性。正是在这个意义上，叔本华才会说：“个性远比民族性更重要。最廉价的骄傲是民族骄傲，也就是所谓的‘民族自豪感’——如果一个人号称为他的国家或民族自豪，那只能说明他本身并没有什么可值得骄傲的，否则也不会抓着那些千百万人共有的东西引以为荣了。”</li>\n</ul>\n<h1 id=\"3-感想\"><a href=\"#3-感想\" class=\"headerlink\" title=\"3 感想\"></a>3 感想</h1><p>幸福的本质在于“人”。首先是需要保障身体健康，保持适当的锻炼，任何事情都要给健康让路，不管是利益、升迁、学问还是名气；其次需要持之以恒地提升内心精神境界并汲取知识，去观赏大自然的鬼斧神工和历史上的伟大成就，像雕琢艺术品一样构建自己的内心世界；不要过多地在意外界的看法，克制嫉妒等不良情绪，减少不必要的痛苦.</p>\n"},{"title":"Windows环境基于GitHub和Hexo搭建个人博客","date":"2022-09-06T15:20:03.000Z","_content":"\n# 1 前言\n\n周末参照网上教程基于GitHub和Hexo搭建个人博客，中间踩了不少的坑花了很多时间，所以将他人教程转载过来并加上一些修订内容记录下来。\n\n# 2 步骤\n\n## 2.1 安装Node.js和Git\n\n- Node.js：[https://nodejs.org/zh-cn](https://link.zhihu.com/?target=https%3A//nodejs.org/zh-cn)\n- Git：[https://git-scm.com/downloads](https://link.zhihu.com/?target=https%3A//git-scm.com/downloads)\n\n基于上面两个网站下载最新的Node.js和Git安装包，基于默认配置一路点下去安装Node.js和Git。安装完成后，在cmd中依次执行 `node -v`、`npm -v` 和 `git --version`，看到类似以下版本号说明安装成功\n\n![](./基于GitHub和Hexo搭建博客/组件版本.png)\n\n## 2.2 连接 Github\n\n使用邮箱注册 [GitHub](https://link.zhihu.com/?target=https%3A//github.com/) 账户，选择免费账户（Free），并完成邮件验证。\n\n在Windows桌面右键 -> Git Bash Here，设置用户名和邮箱(此处的“GitHub 用户名”和\"GitHub 邮箱\"分别替换成个人的GitHub用户名和邮箱，下同）\n\n```powershell\ngit config --global user.name \"GitHub 用户名\"\ngit config --global user.email \"GitHub 邮箱\"\n```\n\n**创建 SSH 密匙**：\n\n输入 `ssh-keygen -t rsa -C \"GitHub 邮箱\"`，然后一路回车。\n\n**添加密匙：**\n\n进入 [C:\\Users\\用户名\\.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。\n\n登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。\n\nTitle 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。\n\n**验证连接：**\n\n打开 Git Bash，输入 `ssh -T git@github.com` 出现 “Are you sure……”，输入 yes 回车确认。显示 “Hi xxx! You've successfully……” 即连接成功。如果没有出现“Hi xxx! You've successfully……”字样，可以再次输入 `ssh -T git@github.com`尝试。\n\n## 2.3 创建 Github Pages 仓库\n\nGitHub 主页右上角加号 -> New repository：\n\n- Repository name 中输入 `用户名.github.io`\n- 勾选 “Initialize this repository with a README”\n- Description 选填\n\n填好后点击 Create repository 创建。\n\n创建后默认自动启用 HTTPS，博客地址为：`https://用户名.github.io`\n\n## 2.4 本地安装 Hexo 博客程序\n\n新建一个文件夹用来存放 Hexo 的程序文件，如 hexoblog。打开该文件夹，右键 -> Git Bash Here。\n\n使用 npm 一键安装 Hexo 博客程序：\n\n```git\nnpm install -g hexo-cli\n```\n\n初始化并安装所需组件：\n\n```git\nhexo init      # 初始化\nnpm install    # 安装组件\n```\n\n完成后依次输入下面命令，启动本地服务器进行预览：\n\n```git\nhexo g   # 生成页面\nhexo s   # 启动预览\n```\n\n**访问** `http://localhost:4000`**，出现 Hexo 默认页面，本地博客安装成功！**\n\n## 2.5 部署 Hexo 到 GitHub Pages\n\n本地博客测试成功后就是上传到 GitHub 进行部署，使其能够在网络上访问。\n\n首先安装 hexo-deployer-git：\n\n```git\nnpm install hexo-deployer-git --save\n```\n\n然后修改hexo程序文件夹中的_config.yml文件末尾的 deploy部分(建议使用notepad++打开)，修改成如下（注意替换GitHub用户名）：\n\n```yml\ndeploy:\n  type: git\n  repository: git@github.com:用户名/用户名.github.io.git\n  branch: main\n```\n\n完成后运行 `hexo d` 将网站上传部署到 GitHub Pages。\n\n完成！这时访问我们的 GitHub 域名 `https://用户名.github.io` 就可以看到 Hexo 网站了。\n\n## 2.6 博客图片问题处理\n\n本人采用开源软件MarkText软件进行本地博客编辑，该软件可以在GitHub下载。需要在本地编辑博客和上传部署后的博客上都正常阅览图片，需要安装一些插件来实现该需求，具体操作如下：\n\n* 在hexo主目录安装插件，在GitBash中输入：`npm install hexo-asset-image-for-hexo5 --save`  \n\n* 在主目录的`_config.yml`文件中查找并修改`post_asset_folder`值为`true`：\n  \n  ```yml\n  post_asset_folder: true\n  ```\n\n这样在使用`hexo new \"article\"`创建新博客文章的时候，就会发现在文章的同级目录出现和md文件名相同的文件夹，可以在这个文件夹中放该文章的图片，例如test.png。例：\n\n| 1  <br>2  <br>3 | ├─article  <br>├──test.png  <br>└─article.md |\n| --------------- | -------------------------------------------- |\n\n* 写法：在文章里即可使用`![](./article/test.png)`在本地显示图片`test.png`，同时在静态网页中也可以正常显示。\n\n**注意：**本文的hexo版本为6.2.0（可以通过hexo v查看），这里安装的图像插件为hexo-asset-image-for-hexo5是适用的（hexo5版本以上建议使用 hexo-asset-image-for-hexo5 ），网上绝大部分博客说的`npm install hexo-asset-image --save`经本人测试并不适配6.2.0版本的hexo。\n\n## 2.7 开始使用\n\n**发布文章**\n\n进入博客所在目录，右键打开 Git Bash Here，创建博文：\n\n```git\nhexo new \"My New Post\"\n```\n\n然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用MarkText在该文件中撰写文章了。\n\n写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。**以后每次发布文章都是这三条命令。**\n\n```git\nhexo clean   # 清除缓存和已生成的静态文件\nhexo g   # 生成页面\nhexo d   # 部署发布\n```\n\n也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 `hexo clean、hexo g` 和 `hexo d` 发布。\n\n```markdown\n---\ntitle: Hello World # 标题\ndate: 2019/3/26 hh:mm:ss # 时间\ncategories: # 分类\n- Diary\ntags: # 标签\n- PS3\n- Games\n---\n\n摘要\n<!--more-->\n正文\n```\n\n## 2.8 更换主题\n\n在 [Themes | Hexo](https://link.zhihu.com/?target=https%3A//hexo.io/themes/) 选择一个喜欢的主题，并参照主题的文档来安装和配置主题。\n\n## 2.9 常用命令\n\n```git\nhexo new \"name\"       # 新建文章\nhexo new page \"name\"  # 新建页面\nhexo g                # 生成页面\nhexo d                # 部署\nhexo g -d             # 生成页面并部署\nhexo s                # 本地预览\nhexo clean            # 清除缓存和已生成的静态文件\nhexo help             # 帮助\n```\n\n# 3 参考资料\n\n[使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/60578464)\n\n[在Hexo中使用本地图片 - 个人学习 (idealx.cn)](https://www.idealx.cn/post/Hexo/hexo-asset-image/)\n\n[fluid-dev/hexo-theme-fluid: 一款 Material Design 风格的 Hexo 主题 / An elegant Material-Design theme for Hexo (github.com)](https://github.com/fluid-dev/hexo-theme-fluid)\n","source":"_posts/基于GitHub和Hexo搭建博客.md","raw":"---\ntitle: Windows环境基于GitHub和Hexo搭建个人博客\ndate: 2022-09-06 23:20:03\ncategories: \n- 其他\ntags: \n- 博客搭建\n---\n\n# 1 前言\n\n周末参照网上教程基于GitHub和Hexo搭建个人博客，中间踩了不少的坑花了很多时间，所以将他人教程转载过来并加上一些修订内容记录下来。\n\n# 2 步骤\n\n## 2.1 安装Node.js和Git\n\n- Node.js：[https://nodejs.org/zh-cn](https://link.zhihu.com/?target=https%3A//nodejs.org/zh-cn)\n- Git：[https://git-scm.com/downloads](https://link.zhihu.com/?target=https%3A//git-scm.com/downloads)\n\n基于上面两个网站下载最新的Node.js和Git安装包，基于默认配置一路点下去安装Node.js和Git。安装完成后，在cmd中依次执行 `node -v`、`npm -v` 和 `git --version`，看到类似以下版本号说明安装成功\n\n![](./基于GitHub和Hexo搭建博客/组件版本.png)\n\n## 2.2 连接 Github\n\n使用邮箱注册 [GitHub](https://link.zhihu.com/?target=https%3A//github.com/) 账户，选择免费账户（Free），并完成邮件验证。\n\n在Windows桌面右键 -> Git Bash Here，设置用户名和邮箱(此处的“GitHub 用户名”和\"GitHub 邮箱\"分别替换成个人的GitHub用户名和邮箱，下同）\n\n```powershell\ngit config --global user.name \"GitHub 用户名\"\ngit config --global user.email \"GitHub 邮箱\"\n```\n\n**创建 SSH 密匙**：\n\n输入 `ssh-keygen -t rsa -C \"GitHub 邮箱\"`，然后一路回车。\n\n**添加密匙：**\n\n进入 [C:\\Users\\用户名\\.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。\n\n登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。\n\nTitle 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。\n\n**验证连接：**\n\n打开 Git Bash，输入 `ssh -T git@github.com` 出现 “Are you sure……”，输入 yes 回车确认。显示 “Hi xxx! You've successfully……” 即连接成功。如果没有出现“Hi xxx! You've successfully……”字样，可以再次输入 `ssh -T git@github.com`尝试。\n\n## 2.3 创建 Github Pages 仓库\n\nGitHub 主页右上角加号 -> New repository：\n\n- Repository name 中输入 `用户名.github.io`\n- 勾选 “Initialize this repository with a README”\n- Description 选填\n\n填好后点击 Create repository 创建。\n\n创建后默认自动启用 HTTPS，博客地址为：`https://用户名.github.io`\n\n## 2.4 本地安装 Hexo 博客程序\n\n新建一个文件夹用来存放 Hexo 的程序文件，如 hexoblog。打开该文件夹，右键 -> Git Bash Here。\n\n使用 npm 一键安装 Hexo 博客程序：\n\n```git\nnpm install -g hexo-cli\n```\n\n初始化并安装所需组件：\n\n```git\nhexo init      # 初始化\nnpm install    # 安装组件\n```\n\n完成后依次输入下面命令，启动本地服务器进行预览：\n\n```git\nhexo g   # 生成页面\nhexo s   # 启动预览\n```\n\n**访问** `http://localhost:4000`**，出现 Hexo 默认页面，本地博客安装成功！**\n\n## 2.5 部署 Hexo 到 GitHub Pages\n\n本地博客测试成功后就是上传到 GitHub 进行部署，使其能够在网络上访问。\n\n首先安装 hexo-deployer-git：\n\n```git\nnpm install hexo-deployer-git --save\n```\n\n然后修改hexo程序文件夹中的_config.yml文件末尾的 deploy部分(建议使用notepad++打开)，修改成如下（注意替换GitHub用户名）：\n\n```yml\ndeploy:\n  type: git\n  repository: git@github.com:用户名/用户名.github.io.git\n  branch: main\n```\n\n完成后运行 `hexo d` 将网站上传部署到 GitHub Pages。\n\n完成！这时访问我们的 GitHub 域名 `https://用户名.github.io` 就可以看到 Hexo 网站了。\n\n## 2.6 博客图片问题处理\n\n本人采用开源软件MarkText软件进行本地博客编辑，该软件可以在GitHub下载。需要在本地编辑博客和上传部署后的博客上都正常阅览图片，需要安装一些插件来实现该需求，具体操作如下：\n\n* 在hexo主目录安装插件，在GitBash中输入：`npm install hexo-asset-image-for-hexo5 --save`  \n\n* 在主目录的`_config.yml`文件中查找并修改`post_asset_folder`值为`true`：\n  \n  ```yml\n  post_asset_folder: true\n  ```\n\n这样在使用`hexo new \"article\"`创建新博客文章的时候，就会发现在文章的同级目录出现和md文件名相同的文件夹，可以在这个文件夹中放该文章的图片，例如test.png。例：\n\n| 1  <br>2  <br>3 | ├─article  <br>├──test.png  <br>└─article.md |\n| --------------- | -------------------------------------------- |\n\n* 写法：在文章里即可使用`![](./article/test.png)`在本地显示图片`test.png`，同时在静态网页中也可以正常显示。\n\n**注意：**本文的hexo版本为6.2.0（可以通过hexo v查看），这里安装的图像插件为hexo-asset-image-for-hexo5是适用的（hexo5版本以上建议使用 hexo-asset-image-for-hexo5 ），网上绝大部分博客说的`npm install hexo-asset-image --save`经本人测试并不适配6.2.0版本的hexo。\n\n## 2.7 开始使用\n\n**发布文章**\n\n进入博客所在目录，右键打开 Git Bash Here，创建博文：\n\n```git\nhexo new \"My New Post\"\n```\n\n然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用MarkText在该文件中撰写文章了。\n\n写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。**以后每次发布文章都是这三条命令。**\n\n```git\nhexo clean   # 清除缓存和已生成的静态文件\nhexo g   # 生成页面\nhexo d   # 部署发布\n```\n\n也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 `hexo clean、hexo g` 和 `hexo d` 发布。\n\n```markdown\n---\ntitle: Hello World # 标题\ndate: 2019/3/26 hh:mm:ss # 时间\ncategories: # 分类\n- Diary\ntags: # 标签\n- PS3\n- Games\n---\n\n摘要\n<!--more-->\n正文\n```\n\n## 2.8 更换主题\n\n在 [Themes | Hexo](https://link.zhihu.com/?target=https%3A//hexo.io/themes/) 选择一个喜欢的主题，并参照主题的文档来安装和配置主题。\n\n## 2.9 常用命令\n\n```git\nhexo new \"name\"       # 新建文章\nhexo new page \"name\"  # 新建页面\nhexo g                # 生成页面\nhexo d                # 部署\nhexo g -d             # 生成页面并部署\nhexo s                # 本地预览\nhexo clean            # 清除缓存和已生成的静态文件\nhexo help             # 帮助\n```\n\n# 3 参考资料\n\n[使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎 (zhihu.com)](https://zhuanlan.zhihu.com/p/60578464)\n\n[在Hexo中使用本地图片 - 个人学习 (idealx.cn)](https://www.idealx.cn/post/Hexo/hexo-asset-image/)\n\n[fluid-dev/hexo-theme-fluid: 一款 Material Design 风格的 Hexo 主题 / An elegant Material-Design theme for Hexo (github.com)](https://github.com/fluid-dev/hexo-theme-fluid)\n","slug":"基于GitHub和Hexo搭建博客","published":1,"updated":"2022-10-08T15:18:44.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl91f3chz0007egoi8vfnghq5","content":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1 前言\"></a>1 前言</h1><p>周末参照网上教程基于GitHub和Hexo搭建个人博客，中间踩了不少的坑花了很多时间，所以将他人教程转载过来并加上一些修订内容记录下来。</p>\n<h1 id=\"2-步骤\"><a href=\"#2-步骤\" class=\"headerlink\" title=\"2 步骤\"></a>2 步骤</h1><h2 id=\"2-1-安装Node-js和Git\"><a href=\"#2-1-安装Node-js和Git\" class=\"headerlink\" title=\"2.1 安装Node.js和Git\"></a>2.1 安装Node.js和Git</h2><ul>\n<li>Node.js：<a href=\"https://link.zhihu.com/?target=https://nodejs.org/zh-cn\">https://nodejs.org/zh-cn</a></li>\n<li>Git：<a href=\"https://link.zhihu.com/?target=https://git-scm.com/downloads\">https://git-scm.com/downloads</a></li>\n</ul>\n<p>基于上面两个网站下载最新的Node.js和Git安装包，基于默认配置一路点下去安装Node.js和Git。安装完成后，在cmd中依次执行 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code>，看到类似以下版本号说明安装成功</p>\n<p><img src=\"/2022/09/06/%E5%9F%BA%E4%BA%8EGitHub%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/%E7%BB%84%E4%BB%B6%E7%89%88%E6%9C%AC.png\"></p>\n<h2 id=\"2-2-连接-Github\"><a href=\"#2-2-连接-Github\" class=\"headerlink\" title=\"2.2 连接 Github\"></a>2.2 连接 Github</h2><p>使用邮箱注册 <a href=\"https://link.zhihu.com/?target=https://github.com/\">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p>\n<p>在Windows桌面右键 -&gt; Git Bash Here，设置用户名和邮箱(此处的“GitHub 用户名”和”GitHub 邮箱”分别替换成个人的GitHub用户名和邮箱，下同）</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">git config <span class=\"hljs-literal\">--global</span> user.name <span class=\"hljs-string\">&quot;GitHub 用户名&quot;</span><br>git config <span class=\"hljs-literal\">--global</span> user.email <span class=\"hljs-string\">&quot;GitHub 邮箱&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>创建 SSH 密匙</strong>：</p>\n<p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p>\n<p><strong>添加密匙：</strong></p>\n<p>进入 [C:\\Users\\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>\n<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>\n<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>\n<p><strong>验证连接：</strong></p>\n<p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。显示 “Hi xxx! You’ve successfully……” 即连接成功。如果没有出现“Hi xxx! You’ve successfully……”字样，可以再次输入 <code>ssh -T git@github.com</code>尝试。</p>\n<h2 id=\"2-3-创建-Github-Pages-仓库\"><a href=\"#2-3-创建-Github-Pages-仓库\" class=\"headerlink\" title=\"2.3 创建 Github Pages 仓库\"></a>2.3 创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p>\n<ul>\n<li>Repository name 中输入 <code>用户名.github.io</code></li>\n<li>勾选 “Initialize this repository with a README”</li>\n<li>Description 选填</li>\n</ul>\n<p>填好后点击 Create repository 创建。</p>\n<p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>\n<h2 id=\"2-4-本地安装-Hexo-博客程序\"><a href=\"#2-4-本地安装-Hexo-博客程序\" class=\"headerlink\" title=\"2.4 本地安装 Hexo 博客程序\"></a>2.4 本地安装 Hexo 博客程序</h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 hexoblog。打开该文件夹，右键 -&gt; Git Bash Here。</p>\n<p>使用 npm 一键安装 Hexo 博客程序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">npm install -g hexo-cli<br></code></pre></td></tr></table></figure>\n\n<p>初始化并安装所需组件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">hexo init      # 初始化<br>npm install    # 安装组件<br></code></pre></td></tr></table></figure>\n\n<p>完成后依次输入下面命令，启动本地服务器进行预览：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">hexo g   # 生成页面<br>hexo s   # 启动预览<br></code></pre></td></tr></table></figure>\n\n<p><strong>访问</strong> <code>http://localhost:4000</code><strong>，出现 Hexo 默认页面，本地博客安装成功！</strong></p>\n<h2 id=\"2-5-部署-Hexo-到-GitHub-Pages\"><a href=\"#2-5-部署-Hexo-到-GitHub-Pages\" class=\"headerlink\" title=\"2.5 部署 Hexo 到 GitHub Pages\"></a>2.5 部署 Hexo 到 GitHub Pages</h2><p>本地博客测试成功后就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>\n<p>首先安装 hexo-deployer-git：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure>\n\n<p>然后修改hexo程序文件夹中的_config.yml文件末尾的 deploy部分(建议使用notepad++打开)，修改成如下（注意替换GitHub用户名）：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">deploy:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">git</span><br>  <span class=\"hljs-attr\">repository:</span> <span class=\"hljs-string\">git@github.com:用户名/用户名.github.io.git</span><br>  <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">main</span><br></code></pre></td></tr></table></figure>\n\n<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p>\n<p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p>\n<h2 id=\"2-6-博客图片问题处理\"><a href=\"#2-6-博客图片问题处理\" class=\"headerlink\" title=\"2.6 博客图片问题处理\"></a>2.6 博客图片问题处理</h2><p>本人采用开源软件MarkText软件进行本地博客编辑，该软件可以在GitHub下载。需要在本地编辑博客和上传部署后的博客上都正常阅览图片，需要安装一些插件来实现该需求，具体操作如下：</p>\n<ul>\n<li><p>在hexo主目录安装插件，在GitBash中输入：<code>npm install hexo-asset-image-for-hexo5 --save</code>  </p>\n</li>\n<li><p>在主目录的<code>_config.yml</code>文件中查找并修改<code>post_asset_folder</code>值为<code>true</code>：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">post_asset_folder:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<p>这样在使用<code>hexo new &quot;article&quot;</code>创建新博客文章的时候，就会发现在文章的同级目录出现和md文件名相同的文件夹，可以在这个文件夹中放该文章的图片，例如test.png。例：</p>\n<table>\n<thead>\n<tr>\n<th>1  <br>2  <br>3</th>\n<th>├─article  <br>├──test.png  <br>└─article.md</th>\n</tr>\n</thead>\n</table>\n<ul>\n<li>写法：在文章里即可使用<code>![](./article/test.png)</code>在本地显示图片<code>test.png</code>，同时在静态网页中也可以正常显示。</li>\n</ul>\n<p><strong>注意：</strong>本文的hexo版本为6.2.0（可以通过hexo v查看），这里安装的图像插件为hexo-asset-image-for-hexo5是适用的（hexo5版本以上建议使用 hexo-asset-image-for-hexo5 ），网上绝大部分博客说的<code>npm install hexo-asset-image --save</code>经本人测试并不适配6.2.0版本的hexo。</p>\n<h2 id=\"2-7-开始使用\"><a href=\"#2-7-开始使用\" class=\"headerlink\" title=\"2.7 开始使用\"></a>2.7 开始使用</h2><p><strong>发布文章</strong></p>\n<p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">hexo new &quot;My New Post&quot;<br></code></pre></td></tr></table></figure>\n\n<p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用MarkText在该文件中撰写文章了。</p>\n<p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。<strong>以后每次发布文章都是这三条命令。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">hexo clean   # 清除缓存和已生成的静态文件<br>hexo g   # 生成页面<br>hexo d   # 部署发布<br></code></pre></td></tr></table></figure>\n\n<p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo clean、hexo g</code> 和 <code>hexo d</code> 发布。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\">---<br>title: Hello World # 标题<br>date: 2019/3/26 hh:mm:ss # 时间<br>categories: # 分类<br><span class=\"hljs-bullet\">-</span> Diary<br>tags: # 标签<br><span class=\"hljs-bullet\">-</span> PS3<br><span class=\"hljs-section\">- Games</span><br><span class=\"hljs-section\">---</span><br><br>摘要<br>&lt;!--more--&gt;<br>正文<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-8-更换主题\"><a href=\"#2-8-更换主题\" class=\"headerlink\" title=\"2.8 更换主题\"></a>2.8 更换主题</h2><p>在 <a href=\"https://link.zhihu.com/?target=https://hexo.io/themes/\">Themes | Hexo</a> 选择一个喜欢的主题，并参照主题的文档来安装和配置主题。</p>\n<h2 id=\"2-9-常用命令\"><a href=\"#2-9-常用命令\" class=\"headerlink\" title=\"2.9 常用命令\"></a>2.9 常用命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">hexo new &quot;name&quot;       # 新建文章<br>hexo new page &quot;name&quot;  # 新建页面<br>hexo g                # 生成页面<br>hexo d                # 部署<br>hexo g -d             # 生成页面并部署<br>hexo s                # 本地预览<br>hexo clean            # 清除缓存和已生成的静态文件<br>hexo help             # 帮助<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"3-参考资料\"><a href=\"#3-参考资料\" class=\"headerlink\" title=\"3 参考资料\"></a>3 参考资料</h1><p><a href=\"https://zhuanlan.zhihu.com/p/60578464\">使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://www.idealx.cn/post/Hexo/hexo-asset-image/\">在Hexo中使用本地图片 - 个人学习 (idealx.cn)</a></p>\n<p><a href=\"https://github.com/fluid-dev/hexo-theme-fluid\">fluid-dev&#x2F;hexo-theme-fluid: 一款 Material Design 风格的 Hexo 主题 &#x2F; An elegant Material-Design theme for Hexo (github.com)</a></p>\n","site":{"data":{}},"wordcount":3106,"excerpt":"","more":"<h1 id=\"1-前言\"><a href=\"#1-前言\" class=\"headerlink\" title=\"1 前言\"></a>1 前言</h1><p>周末参照网上教程基于GitHub和Hexo搭建个人博客，中间踩了不少的坑花了很多时间，所以将他人教程转载过来并加上一些修订内容记录下来。</p>\n<h1 id=\"2-步骤\"><a href=\"#2-步骤\" class=\"headerlink\" title=\"2 步骤\"></a>2 步骤</h1><h2 id=\"2-1-安装Node-js和Git\"><a href=\"#2-1-安装Node-js和Git\" class=\"headerlink\" title=\"2.1 安装Node.js和Git\"></a>2.1 安装Node.js和Git</h2><ul>\n<li>Node.js：<a href=\"https://link.zhihu.com/?target=https://nodejs.org/zh-cn\">https://nodejs.org/zh-cn</a></li>\n<li>Git：<a href=\"https://link.zhihu.com/?target=https://git-scm.com/downloads\">https://git-scm.com/downloads</a></li>\n</ul>\n<p>基于上面两个网站下载最新的Node.js和Git安装包，基于默认配置一路点下去安装Node.js和Git。安装完成后，在cmd中依次执行 <code>node -v</code>、<code>npm -v</code> 和 <code>git --version</code>，看到类似以下版本号说明安装成功</p>\n<p><img src=\"/2022/09/06/%E5%9F%BA%E4%BA%8EGitHub%E5%92%8CHexo%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/%E7%BB%84%E4%BB%B6%E7%89%88%E6%9C%AC.png\"></p>\n<h2 id=\"2-2-连接-Github\"><a href=\"#2-2-连接-Github\" class=\"headerlink\" title=\"2.2 连接 Github\"></a>2.2 连接 Github</h2><p>使用邮箱注册 <a href=\"https://link.zhihu.com/?target=https://github.com/\">GitHub</a> 账户，选择免费账户（Free），并完成邮件验证。</p>\n<p>在Windows桌面右键 -&gt; Git Bash Here，设置用户名和邮箱(此处的“GitHub 用户名”和”GitHub 邮箱”分别替换成个人的GitHub用户名和邮箱，下同）</p>\n<figure class=\"highlight powershell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs powershell\">git config <span class=\"hljs-literal\">--global</span> user.name <span class=\"hljs-string\">&quot;GitHub 用户名&quot;</span><br>git config <span class=\"hljs-literal\">--global</span> user.email <span class=\"hljs-string\">&quot;GitHub 邮箱&quot;</span><br></code></pre></td></tr></table></figure>\n\n<p><strong>创建 SSH 密匙</strong>：</p>\n<p>输入 <code>ssh-keygen -t rsa -C &quot;GitHub 邮箱&quot;</code>，然后一路回车。</p>\n<p><strong>添加密匙：</strong></p>\n<p>进入 [C:\\Users\\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>\n<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>\n<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>\n<p><strong>验证连接：</strong></p>\n<p>打开 Git Bash，输入 <code>ssh -T git@github.com</code> 出现 “Are you sure……”，输入 yes 回车确认。显示 “Hi xxx! You’ve successfully……” 即连接成功。如果没有出现“Hi xxx! You’ve successfully……”字样，可以再次输入 <code>ssh -T git@github.com</code>尝试。</p>\n<h2 id=\"2-3-创建-Github-Pages-仓库\"><a href=\"#2-3-创建-Github-Pages-仓库\" class=\"headerlink\" title=\"2.3 创建 Github Pages 仓库\"></a>2.3 创建 Github Pages 仓库</h2><p>GitHub 主页右上角加号 -&gt; New repository：</p>\n<ul>\n<li>Repository name 中输入 <code>用户名.github.io</code></li>\n<li>勾选 “Initialize this repository with a README”</li>\n<li>Description 选填</li>\n</ul>\n<p>填好后点击 Create repository 创建。</p>\n<p>创建后默认自动启用 HTTPS，博客地址为：<code>https://用户名.github.io</code></p>\n<h2 id=\"2-4-本地安装-Hexo-博客程序\"><a href=\"#2-4-本地安装-Hexo-博客程序\" class=\"headerlink\" title=\"2.4 本地安装 Hexo 博客程序\"></a>2.4 本地安装 Hexo 博客程序</h2><p>新建一个文件夹用来存放 Hexo 的程序文件，如 hexoblog。打开该文件夹，右键 -&gt; Git Bash Here。</p>\n<p>使用 npm 一键安装 Hexo 博客程序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">npm install -g hexo-cli<br></code></pre></td></tr></table></figure>\n\n<p>初始化并安装所需组件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">hexo init      # 初始化<br>npm install    # 安装组件<br></code></pre></td></tr></table></figure>\n\n<p>完成后依次输入下面命令，启动本地服务器进行预览：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">hexo g   # 生成页面<br>hexo s   # 启动预览<br></code></pre></td></tr></table></figure>\n\n<p><strong>访问</strong> <code>http://localhost:4000</code><strong>，出现 Hexo 默认页面，本地博客安装成功！</strong></p>\n<h2 id=\"2-5-部署-Hexo-到-GitHub-Pages\"><a href=\"#2-5-部署-Hexo-到-GitHub-Pages\" class=\"headerlink\" title=\"2.5 部署 Hexo 到 GitHub Pages\"></a>2.5 部署 Hexo 到 GitHub Pages</h2><p>本地博客测试成功后就是上传到 GitHub 进行部署，使其能够在网络上访问。</p>\n<p>首先安装 hexo-deployer-git：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">npm install hexo-deployer-git --save<br></code></pre></td></tr></table></figure>\n\n<p>然后修改hexo程序文件夹中的_config.yml文件末尾的 deploy部分(建议使用notepad++打开)，修改成如下（注意替换GitHub用户名）：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">deploy:</span><br>  <span class=\"hljs-attr\">type:</span> <span class=\"hljs-string\">git</span><br>  <span class=\"hljs-attr\">repository:</span> <span class=\"hljs-string\">git@github.com:用户名/用户名.github.io.git</span><br>  <span class=\"hljs-attr\">branch:</span> <span class=\"hljs-string\">main</span><br></code></pre></td></tr></table></figure>\n\n<p>完成后运行 <code>hexo d</code> 将网站上传部署到 GitHub Pages。</p>\n<p>完成！这时访问我们的 GitHub 域名 <code>https://用户名.github.io</code> 就可以看到 Hexo 网站了。</p>\n<h2 id=\"2-6-博客图片问题处理\"><a href=\"#2-6-博客图片问题处理\" class=\"headerlink\" title=\"2.6 博客图片问题处理\"></a>2.6 博客图片问题处理</h2><p>本人采用开源软件MarkText软件进行本地博客编辑，该软件可以在GitHub下载。需要在本地编辑博客和上传部署后的博客上都正常阅览图片，需要安装一些插件来实现该需求，具体操作如下：</p>\n<ul>\n<li><p>在hexo主目录安装插件，在GitBash中输入：<code>npm install hexo-asset-image-for-hexo5 --save</code>  </p>\n</li>\n<li><p>在主目录的<code>_config.yml</code>文件中查找并修改<code>post_asset_folder</code>值为<code>true</code>：</p>\n<figure class=\"highlight yml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs yml\"><span class=\"hljs-attr\">post_asset_folder:</span> <span class=\"hljs-literal\">true</span><br></code></pre></td></tr></table></figure></li>\n</ul>\n<p>这样在使用<code>hexo new &quot;article&quot;</code>创建新博客文章的时候，就会发现在文章的同级目录出现和md文件名相同的文件夹，可以在这个文件夹中放该文章的图片，例如test.png。例：</p>\n<table>\n<thead>\n<tr>\n<th>1  <br>2  <br>3</th>\n<th>├─article  <br>├──test.png  <br>└─article.md</th>\n</tr>\n</thead>\n</table>\n<ul>\n<li>写法：在文章里即可使用<code>![](./article/test.png)</code>在本地显示图片<code>test.png</code>，同时在静态网页中也可以正常显示。</li>\n</ul>\n<p><strong>注意：</strong>本文的hexo版本为6.2.0（可以通过hexo v查看），这里安装的图像插件为hexo-asset-image-for-hexo5是适用的（hexo5版本以上建议使用 hexo-asset-image-for-hexo5 ），网上绝大部分博客说的<code>npm install hexo-asset-image --save</code>经本人测试并不适配6.2.0版本的hexo。</p>\n<h2 id=\"2-7-开始使用\"><a href=\"#2-7-开始使用\" class=\"headerlink\" title=\"2.7 开始使用\"></a>2.7 开始使用</h2><p><strong>发布文章</strong></p>\n<p>进入博客所在目录，右键打开 Git Bash Here，创建博文：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">hexo new &quot;My New Post&quot;<br></code></pre></td></tr></table></figure>\n\n<p>然后 source 文件夹中会出现一个 My New Post.md 文件，就可以使用MarkText在该文件中撰写文章了。</p>\n<p>写完后运行下面代码将文章渲染并部署到 GitHub Pages 上完成发布。<strong>以后每次发布文章都是这三条命令。</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">hexo clean   # 清除缓存和已生成的静态文件<br>hexo g   # 生成页面<br>hexo d   # 部署发布<br></code></pre></td></tr></table></figure>\n\n<p>也可以不使用命令自己创建 .md 文件，只需在文件开头手动加入如下格式 Front-matter 即可，写完后运行 <code>hexo clean、hexo g</code> 和 <code>hexo d</code> 发布。</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs markdown\">---<br>title: Hello World # 标题<br>date: 2019/3/26 hh:mm:ss # 时间<br>categories: # 分类<br><span class=\"hljs-bullet\">-</span> Diary<br>tags: # 标签<br><span class=\"hljs-bullet\">-</span> PS3<br><span class=\"hljs-section\">- Games</span><br><span class=\"hljs-section\">---</span><br><br>摘要<br>&lt;!--more--&gt;<br>正文<br></code></pre></td></tr></table></figure>\n\n<h2 id=\"2-8-更换主题\"><a href=\"#2-8-更换主题\" class=\"headerlink\" title=\"2.8 更换主题\"></a>2.8 更换主题</h2><p>在 <a href=\"https://link.zhihu.com/?target=https://hexo.io/themes/\">Themes | Hexo</a> 选择一个喜欢的主题，并参照主题的文档来安装和配置主题。</p>\n<h2 id=\"2-9-常用命令\"><a href=\"#2-9-常用命令\" class=\"headerlink\" title=\"2.9 常用命令\"></a>2.9 常用命令</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><code class=\"hljs git\">hexo new &quot;name&quot;       # 新建文章<br>hexo new page &quot;name&quot;  # 新建页面<br>hexo g                # 生成页面<br>hexo d                # 部署<br>hexo g -d             # 生成页面并部署<br>hexo s                # 本地预览<br>hexo clean            # 清除缓存和已生成的静态文件<br>hexo help             # 帮助<br></code></pre></td></tr></table></figure>\n\n<h1 id=\"3-参考资料\"><a href=\"#3-参考资料\" class=\"headerlink\" title=\"3 参考资料\"></a>3 参考资料</h1><p><a href=\"https://zhuanlan.zhihu.com/p/60578464\">使用 Hexo+GitHub 搭建个人免费博客教程（小白向） - 知乎 (zhihu.com)</a></p>\n<p><a href=\"https://www.idealx.cn/post/Hexo/hexo-asset-image/\">在Hexo中使用本地图片 - 个人学习 (idealx.cn)</a></p>\n<p><a href=\"https://github.com/fluid-dev/hexo-theme-fluid\">fluid-dev&#x2F;hexo-theme-fluid: 一款 Material Design 风格的 Hexo 主题 &#x2F; An elegant Material-Design theme for Hexo (github.com)</a></p>\n"},{"title":"如何有效阅读一本书","date":"2022-09-11T13:20:31.000Z","_content":"\n# 1 信息\n\n《如何有效阅读一本书》 奥野宣之 江西人民出版社\n\n# 2 摘录\n\n- 读书笔记的作用：随想笔记、购书清单、各种报道的剪报、读书笔记\n- 过程中基本上是用不到笔记本的，读书时只需要画出重点做好记号，日后只需要确认想要落实的内容，记在读书笔记里就好\n- 读书的过程：选书、购书、读书、笔记、活用\n- 读书清单包括书名、作者、出版社、备注\n- 在某种意义上，购书清单并不只是单纯的“购物备忘录”，而是为了促进主观购书的矫正装置\n- 为了写出精练而深刻的读书笔记，你应该在读完一本书以后认真回想需要摘抄哪一\n   页哪一 行，思考怎样撰写读书笔记，然后严格地筛选需要摘抄的内容，尽量提炼自己的感想，争取用最短的语句表达深刻的含义\n- 写读书笔记感想的时候，不要写一些揣测的或者外来的想法，而是因该写自己的心声\n- 可以考虑定期进行读书笔记的重读工作\n- 多使用参考书：·地图 ·图鉴 ·统计数据 ·百科全书 ·年表 ·词典\n\n# 3 感想\n\n本书介绍了读书的一般流程和注意事项，关键点在于要有目的的读书，以做读书笔记为导向进行读书，精简读书笔记，适当重读活学活用\n","source":"_posts/如何有效阅读一本书.md","raw":"---\ntitle: 如何有效阅读一本书\ndate: 2022-09-11 21:20:31\ncategories: \n- 读书\ntags: \n- 读书与做人\n---\n\n# 1 信息\n\n《如何有效阅读一本书》 奥野宣之 江西人民出版社\n\n# 2 摘录\n\n- 读书笔记的作用：随想笔记、购书清单、各种报道的剪报、读书笔记\n- 过程中基本上是用不到笔记本的，读书时只需要画出重点做好记号，日后只需要确认想要落实的内容，记在读书笔记里就好\n- 读书的过程：选书、购书、读书、笔记、活用\n- 读书清单包括书名、作者、出版社、备注\n- 在某种意义上，购书清单并不只是单纯的“购物备忘录”，而是为了促进主观购书的矫正装置\n- 为了写出精练而深刻的读书笔记，你应该在读完一本书以后认真回想需要摘抄哪一\n   页哪一 行，思考怎样撰写读书笔记，然后严格地筛选需要摘抄的内容，尽量提炼自己的感想，争取用最短的语句表达深刻的含义\n- 写读书笔记感想的时候，不要写一些揣测的或者外来的想法，而是因该写自己的心声\n- 可以考虑定期进行读书笔记的重读工作\n- 多使用参考书：·地图 ·图鉴 ·统计数据 ·百科全书 ·年表 ·词典\n\n# 3 感想\n\n本书介绍了读书的一般流程和注意事项，关键点在于要有目的的读书，以做读书笔记为导向进行读书，精简读书笔记，适当重读活学活用\n","slug":"如何有效阅读一本书","published":1,"updated":"2022-10-08T14:02:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl91f3ci1000begoi62qd4158","content":"<h1 id=\"1-信息\"><a href=\"#1-信息\" class=\"headerlink\" title=\"1 信息\"></a>1 信息</h1><p>《如何有效阅读一本书》 奥野宣之 江西人民出版社</p>\n<h1 id=\"2-摘录\"><a href=\"#2-摘录\" class=\"headerlink\" title=\"2 摘录\"></a>2 摘录</h1><ul>\n<li>读书笔记的作用：随想笔记、购书清单、各种报道的剪报、读书笔记</li>\n<li>过程中基本上是用不到笔记本的，读书时只需要画出重点做好记号，日后只需要确认想要落实的内容，记在读书笔记里就好</li>\n<li>读书的过程：选书、购书、读书、笔记、活用</li>\n<li>读书清单包括书名、作者、出版社、备注</li>\n<li>在某种意义上，购书清单并不只是单纯的“购物备忘录”，而是为了促进主观购书的矫正装置</li>\n<li>为了写出精练而深刻的读书笔记，你应该在读完一本书以后认真回想需要摘抄哪一<br> 页哪一 行，思考怎样撰写读书笔记，然后严格地筛选需要摘抄的内容，尽量提炼自己的感想，争取用最短的语句表达深刻的含义</li>\n<li>写读书笔记感想的时候，不要写一些揣测的或者外来的想法，而是因该写自己的心声</li>\n<li>可以考虑定期进行读书笔记的重读工作</li>\n<li>多使用参考书：·地图 ·图鉴 ·统计数据 ·百科全书 ·年表 ·词典</li>\n</ul>\n<h1 id=\"3-感想\"><a href=\"#3-感想\" class=\"headerlink\" title=\"3 感想\"></a>3 感想</h1><p>本书介绍了读书的一般流程和注意事项，关键点在于要有目的的读书，以做读书笔记为导向进行读书，精简读书笔记，适当重读活学活用</p>\n","site":{"data":{}},"wordcount":429,"excerpt":"","more":"<h1 id=\"1-信息\"><a href=\"#1-信息\" class=\"headerlink\" title=\"1 信息\"></a>1 信息</h1><p>《如何有效阅读一本书》 奥野宣之 江西人民出版社</p>\n<h1 id=\"2-摘录\"><a href=\"#2-摘录\" class=\"headerlink\" title=\"2 摘录\"></a>2 摘录</h1><ul>\n<li>读书笔记的作用：随想笔记、购书清单、各种报道的剪报、读书笔记</li>\n<li>过程中基本上是用不到笔记本的，读书时只需要画出重点做好记号，日后只需要确认想要落实的内容，记在读书笔记里就好</li>\n<li>读书的过程：选书、购书、读书、笔记、活用</li>\n<li>读书清单包括书名、作者、出版社、备注</li>\n<li>在某种意义上，购书清单并不只是单纯的“购物备忘录”，而是为了促进主观购书的矫正装置</li>\n<li>为了写出精练而深刻的读书笔记，你应该在读完一本书以后认真回想需要摘抄哪一<br> 页哪一 行，思考怎样撰写读书笔记，然后严格地筛选需要摘抄的内容，尽量提炼自己的感想，争取用最短的语句表达深刻的含义</li>\n<li>写读书笔记感想的时候，不要写一些揣测的或者外来的想法，而是因该写自己的心声</li>\n<li>可以考虑定期进行读书笔记的重读工作</li>\n<li>多使用参考书：·地图 ·图鉴 ·统计数据 ·百科全书 ·年表 ·词典</li>\n</ul>\n<h1 id=\"3-感想\"><a href=\"#3-感想\" class=\"headerlink\" title=\"3 感想\"></a>3 感想</h1><p>本书介绍了读书的一般流程和注意事项，关键点在于要有目的的读书，以做读书笔记为导向进行读书，精简读书笔记，适当重读活学活用</p>\n"},{"title":"胃靠养,肠靠清","date":"2022-10-09T14:02:15.000Z","_content":"\n# 1 信息\n\n《胃靠养，肠靠清》李博 江苏凤凰科学技术出版社\n\n# 2 摘录\n\n- 现代社会营养不良导致的疾病几乎消失了，取而代之的是营养过剩引起的各种疾病。所以，少吃一些，才是不浪费，才是对身体负责。\n- 能真正起到保健作用的，就是自然天赐的食物、平和的内心，以及适度的运动。\n- 垃圾食品中排在第一位的是油炸品，第二位是腌制品。\n- 晚餐应该遵循“四少”，即少盐少油少脂肪少辣的基本原则。不要忽视每一餐饭，日积月累，影响深远。如果能做到这“晚餐四少”，就代表着我们离高血压、高血脂、胃食管反流和痔疮等一系列病症都远了很多。\n- 不生气不代表憋着，而是要正确地疏导和发泄，这样才是对身体有利的，比如去旅游、参加户外活动等。\n- 早餐的鸡蛋必不可少，可以吃烧饼，不要吃油条、油饼之类的，豆腐脑不如喝粥和豆浆。中午的肉类多吃一些牛肉，蔬菜可以考虑胡萝卜、西红柿、土豆及各种新鲜的绿叶菜。晚餐推荐豆粥，加入薏米、山药和红枣有利于慢性胃炎的恢复。\n- 还是希望大家做个“有心人”，密切关注自己的身体情况，长时间不适时千万不要忍着，越早去医院诊断越好。\n- 要想远离胃癌以及各种癌症，起码要做到以下3点：\n   ①保持心情舒畅，让身体的内分泌系统处于良性循环。②均衡饮食，避免胃癌的外界因素。还要特别说一句，不要乱吃补品。就算是维生素，也不是多多益善，过量进补有害无益。有研究表明，β-胡萝卜素摄入过量有引起胃癌的风险。③坚持体育锻炼，促进新陈代谢。\n- 胆结石、胆囊炎这俩“坏小子”是怎么成长起来的？\n   不吃早饭是“主犯”\n- 与疾病化敌为友，或者和谐共处，是很多疾病治疗的思路。如果能够保持一个平静的心态，允许身体的不完美，完全可以生活得更好，不必纠结于每天与疾病的斗争。\n- 推荐早晨起来先饮用一杯凉开水（蜂蜜水更佳），喝完后立即如厕，即使没有便意，也应该在厕所坐5分钟，逐渐养成定时排便的习惯。\n- 强烈推荐有氧运动，有时运动治疗便秘的效果是您意想不到的。每周运动3次为宜，每次1小时。除以有氧运动为主外，还可以增加仰卧起坐等腹部局部锻炼。运动的强度以出汗30分钟以上为宜。\n\n# 3 感想\n\n- 饮食方面的注意事项：避免油炸、腌制品；做饭少盐少油少脂肪少辣；早餐鸡蛋和豆浆配主食，中午建议牛肉和蔬菜，晚餐建议薏米、山药、红枣豆粥，吃八分饱；推荐早晨起来先饮用一杯温水（蜂蜜水更佳），喝完后立即如厕，即使没有便意，也应该在厕所坐5分钟，逐渐养成定时排便的习惯。\n- 其他方面注意：坚持有氧锻炼；保持平和心态，适当旅游户外运动调整情绪；长期不适及时就医\n","source":"_posts/胃靠养-肠靠清.md","raw":"---\ntitle: 胃靠养,肠靠清\ndate: 2022-10-09 22:02:15\ncategories: \n- 读书\ntags: \n- 养生\n---\n\n# 1 信息\n\n《胃靠养，肠靠清》李博 江苏凤凰科学技术出版社\n\n# 2 摘录\n\n- 现代社会营养不良导致的疾病几乎消失了，取而代之的是营养过剩引起的各种疾病。所以，少吃一些，才是不浪费，才是对身体负责。\n- 能真正起到保健作用的，就是自然天赐的食物、平和的内心，以及适度的运动。\n- 垃圾食品中排在第一位的是油炸品，第二位是腌制品。\n- 晚餐应该遵循“四少”，即少盐少油少脂肪少辣的基本原则。不要忽视每一餐饭，日积月累，影响深远。如果能做到这“晚餐四少”，就代表着我们离高血压、高血脂、胃食管反流和痔疮等一系列病症都远了很多。\n- 不生气不代表憋着，而是要正确地疏导和发泄，这样才是对身体有利的，比如去旅游、参加户外活动等。\n- 早餐的鸡蛋必不可少，可以吃烧饼，不要吃油条、油饼之类的，豆腐脑不如喝粥和豆浆。中午的肉类多吃一些牛肉，蔬菜可以考虑胡萝卜、西红柿、土豆及各种新鲜的绿叶菜。晚餐推荐豆粥，加入薏米、山药和红枣有利于慢性胃炎的恢复。\n- 还是希望大家做个“有心人”，密切关注自己的身体情况，长时间不适时千万不要忍着，越早去医院诊断越好。\n- 要想远离胃癌以及各种癌症，起码要做到以下3点：\n   ①保持心情舒畅，让身体的内分泌系统处于良性循环。②均衡饮食，避免胃癌的外界因素。还要特别说一句，不要乱吃补品。就算是维生素，也不是多多益善，过量进补有害无益。有研究表明，β-胡萝卜素摄入过量有引起胃癌的风险。③坚持体育锻炼，促进新陈代谢。\n- 胆结石、胆囊炎这俩“坏小子”是怎么成长起来的？\n   不吃早饭是“主犯”\n- 与疾病化敌为友，或者和谐共处，是很多疾病治疗的思路。如果能够保持一个平静的心态，允许身体的不完美，完全可以生活得更好，不必纠结于每天与疾病的斗争。\n- 推荐早晨起来先饮用一杯凉开水（蜂蜜水更佳），喝完后立即如厕，即使没有便意，也应该在厕所坐5分钟，逐渐养成定时排便的习惯。\n- 强烈推荐有氧运动，有时运动治疗便秘的效果是您意想不到的。每周运动3次为宜，每次1小时。除以有氧运动为主外，还可以增加仰卧起坐等腹部局部锻炼。运动的强度以出汗30分钟以上为宜。\n\n# 3 感想\n\n- 饮食方面的注意事项：避免油炸、腌制品；做饭少盐少油少脂肪少辣；早餐鸡蛋和豆浆配主食，中午建议牛肉和蔬菜，晚餐建议薏米、山药、红枣豆粥，吃八分饱；推荐早晨起来先饮用一杯温水（蜂蜜水更佳），喝完后立即如厕，即使没有便意，也应该在厕所坐5分钟，逐渐养成定时排便的习惯。\n- 其他方面注意：坚持有氧锻炼；保持平和心态，适当旅游户外运动调整情绪；长期不适及时就医\n","slug":"胃靠养-肠靠清","published":1,"updated":"2022-10-09T14:04:36.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl91f3ci3000degoi3f0v03cf","content":"<h1 id=\"1-信息\"><a href=\"#1-信息\" class=\"headerlink\" title=\"1 信息\"></a>1 信息</h1><p>《胃靠养，肠靠清》李博 江苏凤凰科学技术出版社</p>\n<h1 id=\"2-摘录\"><a href=\"#2-摘录\" class=\"headerlink\" title=\"2 摘录\"></a>2 摘录</h1><ul>\n<li>现代社会营养不良导致的疾病几乎消失了，取而代之的是营养过剩引起的各种疾病。所以，少吃一些，才是不浪费，才是对身体负责。</li>\n<li>能真正起到保健作用的，就是自然天赐的食物、平和的内心，以及适度的运动。</li>\n<li>垃圾食品中排在第一位的是油炸品，第二位是腌制品。</li>\n<li>晚餐应该遵循“四少”，即少盐少油少脂肪少辣的基本原则。不要忽视每一餐饭，日积月累，影响深远。如果能做到这“晚餐四少”，就代表着我们离高血压、高血脂、胃食管反流和痔疮等一系列病症都远了很多。</li>\n<li>不生气不代表憋着，而是要正确地疏导和发泄，这样才是对身体有利的，比如去旅游、参加户外活动等。</li>\n<li>早餐的鸡蛋必不可少，可以吃烧饼，不要吃油条、油饼之类的，豆腐脑不如喝粥和豆浆。中午的肉类多吃一些牛肉，蔬菜可以考虑胡萝卜、西红柿、土豆及各种新鲜的绿叶菜。晚餐推荐豆粥，加入薏米、山药和红枣有利于慢性胃炎的恢复。</li>\n<li>还是希望大家做个“有心人”，密切关注自己的身体情况，长时间不适时千万不要忍着，越早去医院诊断越好。</li>\n<li>要想远离胃癌以及各种癌症，起码要做到以下3点：<br> ①保持心情舒畅，让身体的内分泌系统处于良性循环。②均衡饮食，避免胃癌的外界因素。还要特别说一句，不要乱吃补品。就算是维生素，也不是多多益善，过量进补有害无益。有研究表明，β-胡萝卜素摄入过量有引起胃癌的风险。③坚持体育锻炼，促进新陈代谢。</li>\n<li>胆结石、胆囊炎这俩“坏小子”是怎么成长起来的？<br> 不吃早饭是“主犯”</li>\n<li>与疾病化敌为友，或者和谐共处，是很多疾病治疗的思路。如果能够保持一个平静的心态，允许身体的不完美，完全可以生活得更好，不必纠结于每天与疾病的斗争。</li>\n<li>推荐早晨起来先饮用一杯凉开水（蜂蜜水更佳），喝完后立即如厕，即使没有便意，也应该在厕所坐5分钟，逐渐养成定时排便的习惯。</li>\n<li>强烈推荐有氧运动，有时运动治疗便秘的效果是您意想不到的。每周运动3次为宜，每次1小时。除以有氧运动为主外，还可以增加仰卧起坐等腹部局部锻炼。运动的强度以出汗30分钟以上为宜。</li>\n</ul>\n<h1 id=\"3-感想\"><a href=\"#3-感想\" class=\"headerlink\" title=\"3 感想\"></a>3 感想</h1><ul>\n<li>饮食方面的注意事项：避免油炸、腌制品；做饭少盐少油少脂肪少辣；早餐鸡蛋和豆浆配主食，中午建议牛肉和蔬菜，晚餐建议薏米、山药、红枣豆粥，吃八分饱；推荐早晨起来先饮用一杯温水（蜂蜜水更佳），喝完后立即如厕，即使没有便意，也应该在厕所坐5分钟，逐渐养成定时排便的习惯。</li>\n<li>其他方面注意：坚持有氧锻炼；保持平和心态，适当旅游户外运动调整情绪；长期不适及时就医</li>\n</ul>\n","site":{"data":{}},"wordcount":1010,"excerpt":"","more":"<h1 id=\"1-信息\"><a href=\"#1-信息\" class=\"headerlink\" title=\"1 信息\"></a>1 信息</h1><p>《胃靠养，肠靠清》李博 江苏凤凰科学技术出版社</p>\n<h1 id=\"2-摘录\"><a href=\"#2-摘录\" class=\"headerlink\" title=\"2 摘录\"></a>2 摘录</h1><ul>\n<li>现代社会营养不良导致的疾病几乎消失了，取而代之的是营养过剩引起的各种疾病。所以，少吃一些，才是不浪费，才是对身体负责。</li>\n<li>能真正起到保健作用的，就是自然天赐的食物、平和的内心，以及适度的运动。</li>\n<li>垃圾食品中排在第一位的是油炸品，第二位是腌制品。</li>\n<li>晚餐应该遵循“四少”，即少盐少油少脂肪少辣的基本原则。不要忽视每一餐饭，日积月累，影响深远。如果能做到这“晚餐四少”，就代表着我们离高血压、高血脂、胃食管反流和痔疮等一系列病症都远了很多。</li>\n<li>不生气不代表憋着，而是要正确地疏导和发泄，这样才是对身体有利的，比如去旅游、参加户外活动等。</li>\n<li>早餐的鸡蛋必不可少，可以吃烧饼，不要吃油条、油饼之类的，豆腐脑不如喝粥和豆浆。中午的肉类多吃一些牛肉，蔬菜可以考虑胡萝卜、西红柿、土豆及各种新鲜的绿叶菜。晚餐推荐豆粥，加入薏米、山药和红枣有利于慢性胃炎的恢复。</li>\n<li>还是希望大家做个“有心人”，密切关注自己的身体情况，长时间不适时千万不要忍着，越早去医院诊断越好。</li>\n<li>要想远离胃癌以及各种癌症，起码要做到以下3点：<br> ①保持心情舒畅，让身体的内分泌系统处于良性循环。②均衡饮食，避免胃癌的外界因素。还要特别说一句，不要乱吃补品。就算是维生素，也不是多多益善，过量进补有害无益。有研究表明，β-胡萝卜素摄入过量有引起胃癌的风险。③坚持体育锻炼，促进新陈代谢。</li>\n<li>胆结石、胆囊炎这俩“坏小子”是怎么成长起来的？<br> 不吃早饭是“主犯”</li>\n<li>与疾病化敌为友，或者和谐共处，是很多疾病治疗的思路。如果能够保持一个平静的心态，允许身体的不完美，完全可以生活得更好，不必纠结于每天与疾病的斗争。</li>\n<li>推荐早晨起来先饮用一杯凉开水（蜂蜜水更佳），喝完后立即如厕，即使没有便意，也应该在厕所坐5分钟，逐渐养成定时排便的习惯。</li>\n<li>强烈推荐有氧运动，有时运动治疗便秘的效果是您意想不到的。每周运动3次为宜，每次1小时。除以有氧运动为主外，还可以增加仰卧起坐等腹部局部锻炼。运动的强度以出汗30分钟以上为宜。</li>\n</ul>\n<h1 id=\"3-感想\"><a href=\"#3-感想\" class=\"headerlink\" title=\"3 感想\"></a>3 感想</h1><ul>\n<li>饮食方面的注意事项：避免油炸、腌制品；做饭少盐少油少脂肪少辣；早餐鸡蛋和豆浆配主食，中午建议牛肉和蔬菜，晚餐建议薏米、山药、红枣豆粥，吃八分饱；推荐早晨起来先饮用一杯温水（蜂蜜水更佳），喝完后立即如厕，即使没有便意，也应该在厕所坐5分钟，逐渐养成定时排便的习惯。</li>\n<li>其他方面注意：坚持有氧锻炼；保持平和心态，适当旅游户外运动调整情绪；长期不适及时就医</li>\n</ul>\n"},{"title":"自控力","date":"2022-09-11T13:41:08.000Z","_content":"\n# 1 信息\n\n《自控力》 麦格尼格尔 印刷工业出版社\n\n# 2 摘录\n\n- 如果你觉得自己没有时间和精力去处理“我想要”做的事，那就把它安排在你意志力最强的时候做\n- 大多数心理学家和营养学家推荐低血糖饮食，因为它能让你的血糖稳定。低血糖食品包括瘦肉蛋白、坚果和豆类、粗纤维谷类和麦片、大多数的水果和蔬菜。\n- 美国心理学家协会的调查发现，最有效的解压方法包括：锻炼、阅读、听音乐、与家人朋友相处、按摩、外出散步、冥想或做瑜伽，以及培养有创意的爱好。最没效果的缓解压力的方法则包括：赌博、购物、抽烟、喝酒、暴饮暴食、玩游戏、上网、花两小时以上看电视或电影。\n\n# 3 感想\n\n书籍实用性不强，参照建议展开冥想确实对身心有一定帮助。\n","source":"_posts/自控力.md","raw":"---\ntitle: 自控力\ndate: 2022-09-11 21:41:08\ncategories: \n- 读书\ntags: \n- 心理\n---\n\n# 1 信息\n\n《自控力》 麦格尼格尔 印刷工业出版社\n\n# 2 摘录\n\n- 如果你觉得自己没有时间和精力去处理“我想要”做的事，那就把它安排在你意志力最强的时候做\n- 大多数心理学家和营养学家推荐低血糖饮食，因为它能让你的血糖稳定。低血糖食品包括瘦肉蛋白、坚果和豆类、粗纤维谷类和麦片、大多数的水果和蔬菜。\n- 美国心理学家协会的调查发现，最有效的解压方法包括：锻炼、阅读、听音乐、与家人朋友相处、按摩、外出散步、冥想或做瑜伽，以及培养有创意的爱好。最没效果的缓解压力的方法则包括：赌博、购物、抽烟、喝酒、暴饮暴食、玩游戏、上网、花两小时以上看电视或电影。\n\n# 3 感想\n\n书籍实用性不强，参照建议展开冥想确实对身心有一定帮助。\n","slug":"自控力","published":1,"updated":"2022-10-08T14:02:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl91f3ci5000hegoi3jxr9n1k","content":"<h1 id=\"1-信息\"><a href=\"#1-信息\" class=\"headerlink\" title=\"1 信息\"></a>1 信息</h1><p>《自控力》 麦格尼格尔 印刷工业出版社</p>\n<h1 id=\"2-摘录\"><a href=\"#2-摘录\" class=\"headerlink\" title=\"2 摘录\"></a>2 摘录</h1><ul>\n<li>如果你觉得自己没有时间和精力去处理“我想要”做的事，那就把它安排在你意志力最强的时候做</li>\n<li>大多数心理学家和营养学家推荐低血糖饮食，因为它能让你的血糖稳定。低血糖食品包括瘦肉蛋白、坚果和豆类、粗纤维谷类和麦片、大多数的水果和蔬菜。</li>\n<li>美国心理学家协会的调查发现，最有效的解压方法包括：锻炼、阅读、听音乐、与家人朋友相处、按摩、外出散步、冥想或做瑜伽，以及培养有创意的爱好。最没效果的缓解压力的方法则包括：赌博、购物、抽烟、喝酒、暴饮暴食、玩游戏、上网、花两小时以上看电视或电影。</li>\n</ul>\n<h1 id=\"3-感想\"><a href=\"#3-感想\" class=\"headerlink\" title=\"3 感想\"></a>3 感想</h1><p>书籍实用性不强，参照建议展开冥想确实对身心有一定帮助。</p>\n","site":{"data":{}},"wordcount":287,"excerpt":"","more":"<h1 id=\"1-信息\"><a href=\"#1-信息\" class=\"headerlink\" title=\"1 信息\"></a>1 信息</h1><p>《自控力》 麦格尼格尔 印刷工业出版社</p>\n<h1 id=\"2-摘录\"><a href=\"#2-摘录\" class=\"headerlink\" title=\"2 摘录\"></a>2 摘录</h1><ul>\n<li>如果你觉得自己没有时间和精力去处理“我想要”做的事，那就把它安排在你意志力最强的时候做</li>\n<li>大多数心理学家和营养学家推荐低血糖饮食，因为它能让你的血糖稳定。低血糖食品包括瘦肉蛋白、坚果和豆类、粗纤维谷类和麦片、大多数的水果和蔬菜。</li>\n<li>美国心理学家协会的调查发现，最有效的解压方法包括：锻炼、阅读、听音乐、与家人朋友相处、按摩、外出散步、冥想或做瑜伽，以及培养有创意的爱好。最没效果的缓解压力的方法则包括：赌博、购物、抽烟、喝酒、暴饮暴食、玩游戏、上网、花两小时以上看电视或电影。</li>\n</ul>\n<h1 id=\"3-感想\"><a href=\"#3-感想\" class=\"headerlink\" title=\"3 感想\"></a>3 感想</h1><p>书籍实用性不强，参照建议展开冥想确实对身心有一定帮助。</p>\n"},{"title":"读书与做人","date":"2022-09-11T13:56:05.000Z","_content":"\n# 1 信息\n\n《读书与做人》 季羡林 国际文化出版公司\n\n# 2 摘录\n\n- 除了马克思主义以外，古今中外一些所谓唯心主义哲学家的著作，他们的思维方式和推理方式，也要认真学习。百分之百的唯物主义哲学家和百分之百的唯心主义哲学家，都是没有的。“智者千虑，必有一失”。我们千万不要像过去那样把十分复杂的问题简单化和教条化。                                                                             \n- 不能说假话，但也不必说真话。\n- 遇事必须深思熟虑，先考虑可行性，考虑的方面越广越好。然后再考虑不可行性，也是考虑的方面越广越好。正反两面仔细考虑完以后，就必须加以比较，做出决定，立即行动。如果你考虑正面，又考虑反面之后，再回头来考虑正面，又再考虑反面，那么，如此循环往复，终无宁日，最终成为考虑的巨人，行动的侏儒。\n- 最好能背诵几百首旧诗词和几十篇古文，让它们随时涵蕴于你们心中，低吟于你们口头。这对于你们的文学创作和人文素质的提高，都会有极大的好处。不管你们现在或将来是教书、研究、经商、从政，或者是专业作家，都是如此，概莫能外。\n- 能够百分之六十为他人着想，百分之四十为自己着想，他就是一个及格的好人。\n\n# 3 感想\n\n哲学方面可以考虑以马克思主义为主，其他思想为辅，兼顾唯物主义和唯心主义；需要考虑说话的技巧，假话绝不说，真话不说全；做决定时，广泛考虑正反两面后果断做决定；考虑背一些诗词和古文。\n","source":"_posts/读书与做人.md","raw":"---\ntitle: 读书与做人\ndate: 2022-09-11 21:56:05\ncategories: \n- 读书\ntags: \n- 读书与做人\n---\n\n# 1 信息\n\n《读书与做人》 季羡林 国际文化出版公司\n\n# 2 摘录\n\n- 除了马克思主义以外，古今中外一些所谓唯心主义哲学家的著作，他们的思维方式和推理方式，也要认真学习。百分之百的唯物主义哲学家和百分之百的唯心主义哲学家，都是没有的。“智者千虑，必有一失”。我们千万不要像过去那样把十分复杂的问题简单化和教条化。                                                                             \n- 不能说假话，但也不必说真话。\n- 遇事必须深思熟虑，先考虑可行性，考虑的方面越广越好。然后再考虑不可行性，也是考虑的方面越广越好。正反两面仔细考虑完以后，就必须加以比较，做出决定，立即行动。如果你考虑正面，又考虑反面之后，再回头来考虑正面，又再考虑反面，那么，如此循环往复，终无宁日，最终成为考虑的巨人，行动的侏儒。\n- 最好能背诵几百首旧诗词和几十篇古文，让它们随时涵蕴于你们心中，低吟于你们口头。这对于你们的文学创作和人文素质的提高，都会有极大的好处。不管你们现在或将来是教书、研究、经商、从政，或者是专业作家，都是如此，概莫能外。\n- 能够百分之六十为他人着想，百分之四十为自己着想，他就是一个及格的好人。\n\n# 3 感想\n\n哲学方面可以考虑以马克思主义为主，其他思想为辅，兼顾唯物主义和唯心主义；需要考虑说话的技巧，假话绝不说，真话不说全；做决定时，广泛考虑正反两面后果断做决定；考虑背一些诗词和古文。\n","slug":"读书与做人","published":1,"updated":"2022-10-08T14:02:38.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cl91f3ci7000kegoi85rrbzld","content":"<h1 id=\"1-信息\"><a href=\"#1-信息\" class=\"headerlink\" title=\"1 信息\"></a>1 信息</h1><p>《读书与做人》 季羡林 国际文化出版公司</p>\n<h1 id=\"2-摘录\"><a href=\"#2-摘录\" class=\"headerlink\" title=\"2 摘录\"></a>2 摘录</h1><ul>\n<li>除了马克思主义以外，古今中外一些所谓唯心主义哲学家的著作，他们的思维方式和推理方式，也要认真学习。百分之百的唯物主义哲学家和百分之百的唯心主义哲学家，都是没有的。“智者千虑，必有一失”。我们千万不要像过去那样把十分复杂的问题简单化和教条化。                                                                             </li>\n<li>不能说假话，但也不必说真话。</li>\n<li>遇事必须深思熟虑，先考虑可行性，考虑的方面越广越好。然后再考虑不可行性，也是考虑的方面越广越好。正反两面仔细考虑完以后，就必须加以比较，做出决定，立即行动。如果你考虑正面，又考虑反面之后，再回头来考虑正面，又再考虑反面，那么，如此循环往复，终无宁日，最终成为考虑的巨人，行动的侏儒。</li>\n<li>最好能背诵几百首旧诗词和几十篇古文，让它们随时涵蕴于你们心中，低吟于你们口头。这对于你们的文学创作和人文素质的提高，都会有极大的好处。不管你们现在或将来是教书、研究、经商、从政，或者是专业作家，都是如此，概莫能外。</li>\n<li>能够百分之六十为他人着想，百分之四十为自己着想，他就是一个及格的好人。</li>\n</ul>\n<h1 id=\"3-感想\"><a href=\"#3-感想\" class=\"headerlink\" title=\"3 感想\"></a>3 感想</h1><p>哲学方面可以考虑以马克思主义为主，其他思想为辅，兼顾唯物主义和唯心主义；需要考虑说话的技巧，假话绝不说，真话不说全；做决定时，广泛考虑正反两面后果断做决定；考虑背一些诗词和古文。</p>\n","site":{"data":{}},"wordcount":533,"excerpt":"","more":"<h1 id=\"1-信息\"><a href=\"#1-信息\" class=\"headerlink\" title=\"1 信息\"></a>1 信息</h1><p>《读书与做人》 季羡林 国际文化出版公司</p>\n<h1 id=\"2-摘录\"><a href=\"#2-摘录\" class=\"headerlink\" title=\"2 摘录\"></a>2 摘录</h1><ul>\n<li>除了马克思主义以外，古今中外一些所谓唯心主义哲学家的著作，他们的思维方式和推理方式，也要认真学习。百分之百的唯物主义哲学家和百分之百的唯心主义哲学家，都是没有的。“智者千虑，必有一失”。我们千万不要像过去那样把十分复杂的问题简单化和教条化。                                                                             </li>\n<li>不能说假话，但也不必说真话。</li>\n<li>遇事必须深思熟虑，先考虑可行性，考虑的方面越广越好。然后再考虑不可行性，也是考虑的方面越广越好。正反两面仔细考虑完以后，就必须加以比较，做出决定，立即行动。如果你考虑正面，又考虑反面之后，再回头来考虑正面，又再考虑反面，那么，如此循环往复，终无宁日，最终成为考虑的巨人，行动的侏儒。</li>\n<li>最好能背诵几百首旧诗词和几十篇古文，让它们随时涵蕴于你们心中，低吟于你们口头。这对于你们的文学创作和人文素质的提高，都会有极大的好处。不管你们现在或将来是教书、研究、经商、从政，或者是专业作家，都是如此，概莫能外。</li>\n<li>能够百分之六十为他人着想，百分之四十为自己着想，他就是一个及格的好人。</li>\n</ul>\n<h1 id=\"3-感想\"><a href=\"#3-感想\" class=\"headerlink\" title=\"3 感想\"></a>3 感想</h1><p>哲学方面可以考虑以马克思主义为主，其他思想为辅，兼顾唯物主义和唯心主义；需要考虑说话的技巧，假话绝不说，真话不说全；做决定时，广泛考虑正反两面后果断做决定；考虑背一些诗词和古文。</p>\n"}],"PostAsset":[{"_id":"source/_posts/Hexo博客备份/git文件.png","slug":"git文件.png","post":"cl91f3chn0001egoieru6cpvc","modified":0,"renderable":0},{"_id":"source/_posts/git学习整理/1829507-20220316234843811-601091411.png","slug":"1829507-20220316234843811-601091411.png","post":"cl91f3chw0005egoi9d4j5xaz","modified":0,"renderable":0},{"_id":"source/_posts/基于GitHub和Hexo搭建博客/组件版本.png","slug":"组件版本.png","post":"cl91f3chz0007egoi8vfnghq5","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cl91f3chn0001egoieru6cpvc","category_id":"cl91f3cht0003egoibpl2fif7","_id":"cl91f3ci4000eegoibljf0k74"},{"post_id":"cl91f3chz0007egoi8vfnghq5","category_id":"cl91f3cht0003egoibpl2fif7","_id":"cl91f3ci7000iegoi3p9rchoc"},{"post_id":"cl91f3chr0002egoi5awr0x2r","category_id":"cl91f3ci00008egoi7g0p0t4y","_id":"cl91f3ci9000legoihjffgvqk"},{"post_id":"cl91f3chw0005egoi9d4j5xaz","category_id":"cl91f3ci4000fegoi6hig247c","_id":"cl91f3cib000pegoico3w2uug"},{"post_id":"cl91f3chx0006egoif0fsc3qx","category_id":"cl91f3ci9000megoicrmr2i77","_id":"cl91f3cif000uegoigkaf2ohw"},{"post_id":"cl91f3ci1000begoi62qd4158","category_id":"cl91f3ci9000megoicrmr2i77","_id":"cl91f3cig000yegoi8thncy31"},{"post_id":"cl91f3ci3000degoi3f0v03cf","category_id":"cl91f3ci9000megoicrmr2i77","_id":"cl91f3cih0012egoid4tkf34n"},{"post_id":"cl91f3ci5000hegoi3jxr9n1k","category_id":"cl91f3ci9000megoicrmr2i77","_id":"cl91f3cii0015egoi9o8h0rxn"},{"post_id":"cl91f3ci7000kegoi85rrbzld","category_id":"cl91f3ci9000megoicrmr2i77","_id":"cl91f3cii0017egoi3ckzb7uc"}],"PostTag":[{"post_id":"cl91f3chn0001egoieru6cpvc","tag_id":"cl91f3chv0004egoi2u24ah5n","_id":"cl91f3ci1000aegoibvzb0pwr"},{"post_id":"cl91f3chz0007egoi8vfnghq5","tag_id":"cl91f3chv0004egoi2u24ah5n","_id":"cl91f3ci3000cegoi3xu47hfg"},{"post_id":"cl91f3chr0002egoi5awr0x2r","tag_id":"cl91f3ci00009egoid6bu9yh7","_id":"cl91f3ci7000jegoigsjj43oy"},{"post_id":"cl91f3chw0005egoi9d4j5xaz","tag_id":"cl91f3ci4000gegoidrkg2sls","_id":"cl91f3cib000oegoi3msy4sft"},{"post_id":"cl91f3chx0006egoif0fsc3qx","tag_id":"cl91f3cia000negoig3bl2lms","_id":"cl91f3cie000segoi9ihcf7hj"},{"post_id":"cl91f3ci1000begoi62qd4158","tag_id":"cl91f3cia000negoig3bl2lms","_id":"cl91f3cif000wegoib9xn39cn"},{"post_id":"cl91f3ci3000degoi3f0v03cf","tag_id":"cl91f3cif000vegoi10ra5vnc","_id":"cl91f3cig0010egoif30m966u"},{"post_id":"cl91f3ci5000hegoi3jxr9n1k","tag_id":"cl91f3cig000zegoif9w44x2v","_id":"cl91f3cih0014egoi9wo374st"},{"post_id":"cl91f3ci7000kegoi85rrbzld","tag_id":"cl91f3cia000negoig3bl2lms","_id":"cl91f3cii0016egoid8mj2r5q"}],"Tag":[{"name":"博客搭建","_id":"cl91f3chv0004egoi2u24ah5n"},{"name":"ubuntu","_id":"cl91f3ci00009egoid6bu9yh7"},{"name":"git","_id":"cl91f3ci4000gegoidrkg2sls"},{"name":"读书与做人","_id":"cl91f3cia000negoig3bl2lms"},{"name":"养生","_id":"cl91f3cif000vegoi10ra5vnc"},{"name":"心理","_id":"cl91f3cig000zegoif9w44x2v"}]}}